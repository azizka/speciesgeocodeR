require(shiny)
require(DT)
install_github("azizka/speciesgeocodeR")
require(speciesgeocodeR)
require(maps)
require(sp)
install_github("azizka/speciesgeocodeR")
require(rgbif)
require(sp)
require(devtools)
require(shiny)
require(DT)
#install_github("azizka/speciesgeocodeR")
require(speciesgeocodeR)
require(maps)
dat <- occ_search(scientificName = "Artiodactyla", continent = "africa", return = 'data', limit = 20, hasCoordinate = TRUE,
fields = c('species','decimalLongitude', 'decimalLatitude', 'basisOfRecord', 'taxonRank', 'continent', 'countryCode', 'coordinateUncertaintyInMeters'))
library(sp)
install.packages("sp")
install.packages("sp")
library(speciesgeocodeR)
dat <- occ_search(scientificName = "Artiodactyla", continent = "africa", return = 'data', limit = 20, hasCoordinate = TRUE,
fields = c('species','decimalLongitude', 'decimalLatitude', 'basisOfRecord', 'taxonRank', 'continent', 'countryCode', 'coordinateUncertaintyInMeters'))
dat <- data.frame(dat)
names(dat) <- tolower(names(dat))
nrow(dat)
head(dat)
plot(RichnessGrid(dat, ras = NULL, reso = 1))
dat <- read.csv("C:/Users/alexander.zizka/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Conferences/2016_11_Antonelli_lab_meeting/spatial_data_workshop/0026470-160910150852091.csv", sep = "\t")
plot(RichnessGrid(dat, ras = NULL, reso = 1))
#Basis of record
table(dat$basisofrecord)
out <- subset(dat, dat$basisofrecord != "FOSSIL_SPECIMEN")
out <- subset(out, out$basisofrecord != "UNKNOWN")
#check coordinate uncertainty, the precision of the climate data used later on is approximately 10x10 km
hist(out$coordinateuncertaintyinmeters, breaks = 100)
sum(na.omit(out$coordinateuncertaintyinmeters > 10000))
out <- out[out$coordinateuncertaintyinmeters < 10000,]
```
#Taxonomic cleaning
As a simple form of cleaning we exclude species not identified to species level.
```{r}
#only species with full species name
out <- out[!out$species == "", ]
out <- out[!is.na(out$species),]
out <- out[out$taxonrank %in% c("SPECIES", "SUBSPECIES"),]
nrow(out)
#excludes entries with sp. as species epithet
test <- strsplit(as.character(out$species), split = " ")
out <- out[!lapply(test, function(x) x[2]) == "sp", ]
#collapse ranks below species level
out$species <- paste(lapply(test, function(x) x[1]), lapply(test, function(x) x[2]), sep = " ")
head(out)
test <- CleanCoordinates(x = out[,c("decimallongitude", "decimallatitude")],
species = out[,"species"],
countries = out[,"countrycode"], centroids.rad = 0.05, outliers = F) #countrycheck test is not working
plot(test)
head(test)
out <- out[test$summary == TRUE,]
head(out)
rec <- RichnessGrid(out, ras = NULL,  reso = 1)
plot(rec)
names(out)
head(out)
is.na(out$decimallongitude)
ta
dim(out)
#Basis of record
table(dat$basisofrecord)
out <- subset(dat, dat$basisofrecord != "FOSSIL_SPECIMEN")
out <- subset(out, out$basisofrecord != "UNKNOWN")
#check coordinate uncertainty, the precision of the climate data used later on is approximately 10x10 km
hist(out$coordinateuncertaintyinmeters, breaks = 100)
sum(na.omit(out$coordinateuncertaintyinmeters > 10000))
out <- out[out$coordinateuncertaintyinmeters < 10000,]
#only species with full species name
out <- out[!out$species == "", ]
out <- out[!is.na(out$species),]
out <- out[out$taxonrank %in% c("SPECIES", "SUBSPECIES"),]
nrow(out)
#excludes entries with sp. as species epithet
test <- strsplit(as.character(out$species), split = " ")
out <- out[!lapply(test, function(x) x[2]) == "sp", ]
#collapse ranks below species level
out$species <- paste(lapply(test, function(x) x[1]), lapply(test, function(x) x[2]), sep = " ")
dat <- read.csv("C:/Users/alexander.zizka/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Conferences/2016_11_Antonelli_lab_meeting/spatial_data_workshop/0026470-160910150852091.csv", sep = "\t")
dim(dat)
table(dat$basisofrecord)
out <- subset(dat, dat$basisofrecord != "FOSSIL_SPECIMEN")
out <- subset(out, out$basisofrecord != "UNKNOWN")
#check coordinate uncertainty, the precision of the climate data used later on is approximately 10x10 km
hist(out$coordinateuncertaintyinmeters, breaks = 100)
sum(na.omit(out$coordinateuncertaintyinmeters > 10000))
out <- out[out$coordinateuncertaintyinmeters < 10000,]
dim(out)
out <- out[!out$species == "", ]
out <- out[!is.na(out$species),]
out <- out[out$taxonrank %in% c("SPECIES", "SUBSPECIES"),]
nrow(out)
#excludes entries with sp. as species epithet
test <- strsplit(as.character(out$species), split = " ")
out <- out[!lapply(test, function(x) x[2]) == "sp", ]
#collapse ranks below species level
out$species <- paste(lapply(test, function(x) x[1]), lapply(test, function(x) x[2]), sep = " ")
dim(out)
#Basis of record
table(dat$basisofrecord)
out <- subset(dat, dat$basisofrecord != "FOSSIL_SPECIMEN")
out <- subset(out, out$basisofrecord != "UNKNOWN")
#check coordinate uncertainty, the precision of the climate data used later on is approximately 10x10 km
hist(out$coordinateuncertaintyinmeters, breaks = 100)
sum(na.omit(out$coordinateuncertaintyinmeters > 10000))
out <- out[out$coordinateuncertaintyinmeters < 10000,]
dim(out)
out[!out$species == "", ]
head(out)
table(dat$basisofrecord)
out <- subset(dat, dat$basisofrecord != "FOSSIL_SPECIMEN")
out <- subset(out, out$basisofrecord != "UNKNOWN")
head(out)
out$coordinateuncertaintyinmeters < 10000
out2 <- subset(out,out$coordinateuncertaintyinmeters < 10000)
head(out2)
dim(out2)
out2 <- subset(out, out$coordinateuncertaintyinmeters < 10000 | is.na(out$coordinateuncertaintyinmeters))
dim(out2)
#Basis of record
table(dat$basisofrecord)
out <- subset(dat, dat$basisofrecord != "FOSSIL_SPECIMEN")
out <- subset(out, out$basisofrecord != "UNKNOWN")
dim(out)
#check coordinate uncertainty, the precision of the climate data used later on is approximately 10x10 km
hist(out$coordinateuncertaintyinmeters, breaks = 100)
sum(na.omit(out$coordinateuncertaintyinmeters > 10000))
out2 <- subset(out, out$coordinateuncertaintyinmeters < 10000 | is.na(out$coordinateuncertaintyinmeters))
table(dat$basisofrecord)
out <- subset(dat, dat$basisofrecord != "FOSSIL_SPECIMEN")
out <- subset(out, out$basisofrecord != "UNKNOWN")
#check coordinate uncertainty, the precision of the climate data used later on is approximately 10x10 km
hist(out$coordinateuncertaintyinmeters, breaks = 100)
sum(na.omit(out$coordinateuncertaintyinmeters > 10000))
out <- subset(out, out$coordinateuncertaintyinmeters < 10000 | is.na(out$coordinateuncertaintyinmeters))
#only species with full species name
out <- out[!out$species == "", ]
out <- out[!is.na(out$species),]
out <- out[out$taxonrank %in% c("SPECIES", "SUBSPECIES"),]
nrow(out)
#excludes entries with sp. as species epithet
test <- strsplit(as.character(out$species), split = " ")
out <- out[!lapply(test, function(x) x[2]) == "sp", ]
#collapse ranks below species level
out$species <- paste(lapply(test, function(x) x[1]), lapply(test, function(x) x[2]), sep = " ")
head(out)
test <- CleanCoordinates(x = out[,c("decimallongitude", "decimallatitude")],
species = out[,"species"],
countries = out[,"countrycode"], centroids.rad = 0.05, outliers = F) #countrycheck test is not working
plot(test)
head(test)
out <- out[test$summary == TRUE,]
head(out)
rec <- RichnessGrid(out, ras = NULL,  reso = 1)
plot(rec)
#check difference before and after cleaning
nrow(dat)
nrow(out)
length(unique(dat$species))
length(unique(out$species))
head(out)
tail(out)
is.na(out$decimallongitude)
tail(out)
table(dat$basisofrecord)
out <- subset(dat, dat$basisofrecord != "FOSSIL_SPECIMEN")
out <- subset(out, out$basisofrecord != "UNKNOWN")
#check coordinate uncertainty, the precision of the climate data used later on is approximately 10x10 km
hist(out$coordinateuncertaintyinmeters, breaks = 100)
sum(na.omit(out$coordinateuncertaintyinmeters > 10000))
out <- subset(out, out$coordinateuncertaintyinmeters < 10000 | is.na(out$coordinateuncertaintyinmeters))
tail(out)
#only species with full species name
out <- out[!out$species == "", ]
out <- out[!is.na(out$species),]
out <- out[out$taxonrank %in% c("SPECIES", "SUBSPECIES"),]
nrow(out)
#excludes entries with sp. as species epithet
test <- strsplit(as.character(out$species), split = " ")
out <- out[!lapply(test, function(x) x[2]) == "sp", ]
#collapse ranks below species level
out$species <- paste(lapply(test, function(x) x[1]), lapply(test, function(x) x[2]), sep = " ")
tail(out)
test <- CleanCoordinates(x = out[,c("decimallongitude", "decimallatitude")],
species = out[,"species"],
countries = out[,"countrycode"], centroids.rad = 0.05, outliers = F) #countrycheck test is not working
plot(test)
head(test)
out <- out[test$summary == TRUE,]
tail(out)
table(dat$basisofrecord)
out <- subset(dat, dat$basisofrecord != "FOSSIL_SPECIMEN")
out <- subset(out, out$basisofrecord != "UNKNOWN")
#check coordinate uncertainty, the precision of the climate data used later on is approximately 10x10 km
hist(out$coordinateuncertaintyinmeters, breaks = 100)
sum(na.omit(out$coordinateuncertaintyinmeters > 10000))
out <- subset(out, out$coordinateuncertaintyinmeters < 10000 | is.na(out$coordinateuncertaintyinmeters))
#only species with full species name
out <- out[!out$species == "", ]
out <- out[!is.na(out$species),]
out <- out[out$taxonrank %in% c("SPECIES", "SUBSPECIES"),]
nrow(out)
#excludes entries with sp. as species epithet
test <- strsplit(as.character(out$species), split = " ")
out <- out[!lapply(test, function(x) x[2]) == "sp", ]
#collapse ranks below species level
out$species <- paste(lapply(test, function(x) x[1]), lapply(test, function(x) x[2]), sep = " ")
test <- CleanCoordinates(x = out[,c("decimallongitude", "decimallatitude")],
species = out[,"species"],
countries = out[,"countrycode"], centroids.rad = 0.05, outliers = F) #countrycheck test is not working
plot(test)
head(test)
tail(test)
tail(out)
out2 <- subset(out, test$summary == TRUE)
tail(out2)
out <- subset(out, test$summary == TRUE)
rec <- RichnessGrid(out, ras = NULL,  reso = 1)
plot(rec)
#check difference before and after cleaning
nrow(dat)
nrow(out)
length(unique(dat$species))
length(unique(out$species))
ras <- raster(SpatialPoints(dat[, c('decimallongitude', 'decimallatitude')]))
res(ras) <- 1
diff <- RichnessGrid(dat, ras) - RichnessGrid(out, ras)
plot(diff)
install.packages("rworldmaps")
install.packages("rworldmap")
install.packages("taxize")
require(maps)
require(rgbif)
require(sp)
require(devtools)
require(shiny)
require(DT)
require(raster)
require(maps)
#install_github("azizka/speciesgeocodeR")
require(speciesgeocodeR)
require(maps)
dat <- read.csv("C:/Users/alexander.zizka/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Conferences/2016_11_Antonelli_lab_meeting/spatial_data_workshop/0026470-160910150852091.csv", sep = "\t")
plot(RichnessGrid(dat, ras = NULL, reso = 1))
table(dat$basisofrecord)
nrow(dat)
out <- subset(dat, dat$basisofrecord != "FOSSIL_SPECIMEN")
out <- subset(out, out$basisofrecord != "UNKNOWN")
nrow(out)
hist(out$coordinateuncertaintyinmeters, breaks = 100)
sum(na.omit(out$coordinateuncertaintyinmeters > 10000))
out <- subset(out, out$coordinateuncertaintyinmeters < 10000 | is.na(out$coordinateuncertaintyinmeters))
out <- subset(out, out$coordinateuncertaintyinmeters < 10000 | is.na(out$coordinateuncertaintyinmeters))
out <- out[!out$species == "", ]
out <- out[!is.na(out$species),]
nrow(out)
table(out$taxonrank)
out <- out[out$taxonrank %in% c("SPECIES", "SUBSPECIES"),]
test <- strsplit(as.character(out$species), split = " ")
out <- out[!lapply(test, function(x) x[2]) == "sp", ]
#collapse ranks below species level
out$species <- paste(lapply(test, function(x) x[1]), lapply(test, function(x) x[2]), sep = " ")
```
nrow(out)
test <- CleanCoordinates(x = out[,c("decimallongitude", "decimallatitude")],
species = out[,"species"],
countries = out[,"countrycode"], centroids.rad = 0.05, outliers = F)
plot(test)
out <- subset(out, test$summary == TRUE)
nrow(dat)
nrow(out)
length(unique(dat$species))
length(unique(out$species))
rec <- RichnessGrid(out, ras = NULL,  reso = 1)
plot(rec)
ras <- raster(SpatialPoints(dat[, c('decimallongitude', 'decimallatitude')]))
res(ras) <- 1
diff <- RichnessGrid(dat, ras) - RichnessGrid(out, ras)
plot(diff)
write.csv(out, "Mammals_africa_cleaned.csv")
pts <- SpatialPoints(dat)
pts <- SpatialPoints(dat[, c("decimallongitude", "decimallatitude")])
wgs1984 <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
behr <- CRS('+proj=cea +lon_0=0 +lat_ts=30 +x_0=0 +y_0=0 +datum=WGS84 +ellps=WGS84 +units=m +no_defs')
spTransform(pts, behr)
pts <- SpatialPoints(dat[, c("decimallongitude", "decimallatitude")], CRS = wgs1984)
?SpatialPoints
pts <- SpatialPoints(dat[, c("decimallongitude", "decimallatitude")], proj4string = wgs1984)
pts.behr <- spTransform(pts, behr)
ras <- raster("C:/Users/alexander.zizka/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Conferences/2016_11_Antonelli_lab_meeting/spatial_data_workshop/ANNUAL_NDVI.tif")
plot(ras)
dat.behr <- data.frame(species = dat$species, coordinates(pts.behr))
head(dat.behr)
RichnessGrid(dat.behr, ras = ras)
out <- RichnessGrid(dat.behr, ras = ras)
??writeRaster
?writeRaster
plot(out)
plot(ras)
plot(out, add = T)
writeRaster(out, filename = "artiodactyla_cleaned_behrman", format = "GTiff")
dat <- read.csv("C:/Users/alexander.zizka/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Conferences/2016_11_Antonelli_lab_meeting/spatial_data_workshop/0026470-160910150852091.csv")
dat <- read.csv("C:/Users/alexander.zizka/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Conferences/2016_11_Antonelli_lab_meeting/spatial_data_workshop/0026470-160910150852091.csv", sep = ",")
dat <- read.csv("C:/Users/alexander.zizka/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Conferences/2016_11_Antonelli_lab_meeting/spatial_data_workshop/0026470-160910150852091.csv", sep = "\t")
wgs1984 <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
behr <- CRS('+proj=cea +lon_0=0 +lat_ts=30 +x_0=0 +y_0=0 +datum=WGS84 +ellps=WGS84 +units=m +no_defs')
pts <- SpatialPoints(dat[, c("decimallongitude", "decimallatitude")], proj4string = wgs1984)
pts.behr <- spTransform(pts, behr)
dat.behr <- data.frame(species = dat$species, coordinates(pts.behr))
#load background country borders
ras <- raster("C:/Users/alexander.zizka/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Conferences/2016_11_Antonelli_lab_meeting/spatial_data_workshop/ANNUAL_NDVI.tif")
out <- RichnessGrid(dat.behr, ras = ras)
# writeRaster(out, filename = "artiodactyla_cleaned_behrman", format = "GTiff")
writeRaster(out, filename = "artiodactyla_gbif_behrman", format = "GTiff")
getwd()
#Download from gbif
dip<- occ_search(scientificName="Diprotodontia", return = 'data', limit=10000)
#transform the weird data output into a data-frame
dip2 <-data.frame(dip)
#look at the columns in the dataframe and see which ones are of interest
names(dip2)
#extract the columns of interest
dip3<-dip2[,c("name","decimalLongitude","decimalLatitude","coordinateUncertaintyInMeters","country","taxonRank")]
head(dip3)
#plot the distribution of longitudes
hist(dip3[,2])
hist(dip3[,3])
#exclude species not identified as species, the "!" says everything that does not match the test
dip4<-dip3[!is.na(dip3[,6]),]
# or alternatively delete all lines that have missing data
dip4<-dip3[complete.cases(dip3),]
#check what difference it made
nrow(dip3)
nrow(dip4)
head(dip4)
#in case you want to split a string you can use the strsplit() function
strsplit(dip3[,1]," ")
#now we clean the data
#first we have to create a data.frame with only the coordinate data
coord<-dip4[,c(2,3)]
#now run the CleanCoordinated function
cleaned<-CleanCoordinates(dip4[,2:3],countries=dip4[,5],species=dip4[,1],countrycheck = F,urban=TRUE,duplicates=TRUE,output="cleaned")
head(cleaned)
cleaned2<- data.frame(cleaned)
plot(RichnessGrid(cleaned[,c(3,1:2)],ras=NULL,reso=1))
getwd()
list.files(pattern = ".tif")
setwd("C:/Users/alexander.zizka/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Conferences/2016_11_Antonelli_lab_meeting/spatial_data_workshop")
list.files(pattern = ".tif")
dat <- stack(inp)
dat
plot(dat)
inp
inp <- list.files(pattern = ".tif")
inp
dat <- stack(inp)
inp <- list.files(pattern = ".tif")
dat <- stack(inp)
dat
inp <- list.files(pattern = ".tif")
dat <- stack(inp)
dat
plot(dat)
inp <- list.files(pattern = ".tif")
dat <- stack(inp)
dat
liste
inp
dat <- stack(inp[4:5])
pred <- stack(inpc(1:3, 6:7))
pred <- stack(inp[c(1:3, 6:7)])
plot(pred)
plot(pred)
plot(dat)
dat
dat$claened
names(dat)
CELL=which(dat$rtiodactyla_cleaned_behrman[1:51120]>0)
dat$rtiodactyla_cleaned_behrman
dat$artiodactyla_cleaned_behrman
CELL=which(dat$artiodactyla_cleaned_behrman[1:51120]>0)
CELL
pred
ALT
ALT=pred$Altitude_range[CELL]
NDVI=pred$ANNUAL_NDVI[CELL]
AN_TEMP=pred$Annual_Temp[CELL]
Log_prec=pred$Log_prec[CELL]
Prec_seasonality=pred$Prec_seasonality[CELL]
DIV=dat$artiodactyla_cleaned_behrman[CELL]
DIV=(DIV-mean(DIV))/sd(DIV)
ALT=(ALT-mean(ALT))/sd(ALT)
NDVI=(NDVI-mean(NDVI))/sd(NDVI)
AN_TEMP=(AN_TEMP-mean(AN_TEMP))/sd(AN_TEMP)
Log_prec=(Log_prec-mean(Log_prec))/sd(Log_prec)
Prec_seasonality=(Prec_seasonality-mean(Prec_seasonality))/sd(Prec_seasonality)
MO=glm( DIV~ALT+NDVI+ AN_TEMP+Log_prec+Prec_seasonality)
DIV
MO=glm( DIV~ALT+NDVI+ AN_TEMP+Log_prec+Prec_seasonality)
dim(ALT)
summary(ALT
)
MO=glm( DIV~NDVI+ AN_TEMP+Log_prec+Prec_seasonality)
CELL
plot(dat$artiodactyla_cleaned_behrman)
pred
test <- pred[2]
test[CELL]
test
raster(pred[[2]])
test <- raster(pred[[2]])
plot(test)
test
test <- pred[[2]]
plot(test)
test[CELL]
which(is.na(test[CELL]))
sumary(NDVI)
summary(NDVI)
summary(ALT)
sumamry(PRED)
summary(PRED)
summary(pred)
names(dat)
DIV=dat$artiodactyla_cleaned_behrman
names(pred)
ALT=pred$Altitude_range
NDVI=pred$ANNUAL_NDVI
TEMP=pred$Annual_Temp
PREC_ANN=pred$Log_prec
PREC_SEA=pred$Prec_seasonality
CELL=which(DIV[1:51120]>0 & is.na(ALT)==F & is.na(TEMP)==F)
CELL=which(DIV[1:51120]>0 & is.na(ALT[1:5110])==F & is.na(TEMP[1:51120])==F)
CELL=which(DIV[1:51120]>0 & is.na(ALT[1:51120])==F & is.na(TEMP[1:51120])==F)
ALT=(ALT-mean(ALT))/sd(ALT); summary(ALT)
ALT_VAL=(ALT[CELL]-mean(ALT[CELL]))/sd(ALT[CELL]); summary(ALT_VAL)
TEMP_VAL=(TEMP[CELL]-mean(TEMP[CELL]))/sd(TEMP[CELL]); summary(TEMP_VAL)
DIV_VAL=(DIV[CELL]-mean(DIV[CELL]))/sd(DIV[CELL]); summary(DIV_VAL)
PREC_ANN_VAL=(PREC_ANN[CELL]-mean(PREC_ANN[CELL]))/sd(PREC_ANN[CELL]); summary(PREC_ANN_VAL)
PREC_SEA_VAL=(PREC_SEA[CELL]-mean(PREC_SEA[CELL]))/sd(PREC_SEA[CELL]); summary(PREC_SEA_VAL)
NDVI_VAL=(NDVI[CELL]-mean(NDVI[CELL]))/sd(NDVI[CELL]); summary(NDVI_VAL)
MO=glm(DIV_VAL ~ ALT_VAL + NDVI_VAL + TEMP_VAL + PREC_SEA_VAL + PREC_ANN_VAL)
summary(M0)
M0=glm(DIV_VAL ~ ALT_VAL + NDVI_VAL + TEMP_VAL + PREC_SEA_VAL + PREC_ANN_VAL)
summary(M0)
plot(M0)
XYFromCell[CELL]
xyFromCell[CELL]
xyFromCell(DIV,CELL)
COOR=project(xyFromCell(DIV,CELL), "+proj=cea +datum=WGS84 +lat_ts=30", inv=T)
library(raster); library(spdep); library(ncf) ; library(proj4)
install.packages("spdep")
library(raster); library(spdep); library(ncf) ; library(proj4)
install.packages("ncf")
library(raster); library(spdep); library(ncf) ; library(proj4)
install.packages("proj4")
library(raster); library(spdep); library(ncf) ; library(proj4)
COOR=project(xyFromCell(DIV,CELL), "+proj=cea +datum=WGS84 +lat_ts=30", inv=T)
summary(COOR)
plot(COOR)
knn2b
Neig1=knn2nb(knearneigh(COOR,1, longlat = T))
Neig=knn2nb(knearneigh(COOR,1, longlat = T)); N1=nb2listw(Neig,style="W",zero.policy =T)
Neig=knn2nb(knearneigh(COOR,2, longlat = T)); N2=nb2listw(Neig,style="W",zero.policy =T)
Neig=knn2nb(knearneigh(COOR,3, longlat = T)); N3=nb2listw(Neig,style="W",zero.policy =T)
Neig=knn2nb(knearneigh(COOR,4, longlat = T)); N4=nb2listw(Neig,style="W",zero.policy =T)
Neig=knn2nb(knearneigh(COOR,5, longlat = T)); N5=nb2listw(Neig,style="W",zero.policy =T)
Neig=knn2nb(knearneigh(COOR,6, longlat = T)); N6=nb2listw(Neig,style="W",zero.policy =T)
Neig=knn2nb(knearneigh(COOR,7, longlat = T)); N7=nb2listw(Neig,style="W",zero.policy =T)
Neig=knn2nb(knearneigh(COOR,8, longlat = T)); N8=nb2listw(Neig,style="W",zero.policy =T)
Neig=knn2nb(knearneigh(COOR,8, longlat = T)); N8=nb2listw(Neig,style="W",zero.policy =T)
M1=errorsarlm(formula, listw, zero.policy=T)
M1=errorsarlm(DIV_VAL ~ ALT_VAL + NDVI_VAL + TEMP_VAL + PREC_SEA_VAL + PREC_ANN_VAL, N1, zero.policy=T)
M1=errorsarlm(DIV_VAL ~ ALT_VAL + NDVI_VAL + TEMP_VAL + PREC_SEA_VAL + PREC_ANN_VAL, listw=N1, zero.policy=T)
M2=errorsarlm(DIV_VAL ~ ALT_VAL + NDVI_VAL + TEMP_VAL + PREC_SEA_VAL + PREC_ANN_VAL, listw=N2, zero.policy=T)
aic(M0)
AIC(M0)
AIC(M1)
M3=errorsarlm(DIV_VAL ~ ALT_VAL + NDVI_VAL + TEMP_VAL + PREC_SEA_VAL + PREC_ANN_VAL, listw=N3, zero.policy=T)
AIC(M2)
AIC(M3)
smmary(M3)
summary(M3)
summary(M0)
M8=errorsarlm(DIV_VAL ~ ALT_VAL + NDVI_VAL + TEMP_VAL + PREC_SEA_VAL + PREC_ANN_VAL, listw=N8, zero.policy=T)
AIC(M8)
AIC(M3)
summary(M8)
summary(M3)
write.table(predict.sarlm(M3), ”TEMP_FILE.txt")
write.table(predict.sarlm(M3), ”TEMP_FILE.txt")
write.table(predict.sarlm(M3), "TEMP_FILE.txt")
read.table("TEMP_FILE.txt") ->PREDICT
file.remove("TEMP_FILE.txt")
cor(DIV, PREDICT[,1])^2
cor(DIV_VAL, PREDICT[,1])^2
cor(DIV_VAL, PREDICT[,2])^2
cor(DIV_VAL, PREDICT[,3])^2
predict.sarlm(M3)
summary(M3)
correlog(COOR[,1], COOR[,2], M3$resid, increment =500, resamp=R,latlon=T)
correlog(COOR[,1], COOR[,2], M3$resid, increment =500, resamp=100,latlon=T)
plot(correlog(COOR[,1], COOR[,2], M3$resid, increment =500, resamp=20,latlon=T))
plot(correlog(COOR[,1], COOR[,2], M0$resid, increment =500, resamp=20,latlon=T))
plot(correlog(COOR[,1], COOR[,2], M8$resid, increment =500, resamp=20,latlon=T))
