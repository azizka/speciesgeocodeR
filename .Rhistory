sumamry(PRED)
summary(PRED)
summary(pred)
names(dat)
DIV=dat$artiodactyla_cleaned_behrman
names(pred)
ALT=pred$Altitude_range
NDVI=pred$ANNUAL_NDVI
TEMP=pred$Annual_Temp
PREC_ANN=pred$Log_prec
PREC_SEA=pred$Prec_seasonality
CELL=which(DIV[1:51120]>0 & is.na(ALT)==F & is.na(TEMP)==F)
CELL=which(DIV[1:51120]>0 & is.na(ALT[1:5110])==F & is.na(TEMP[1:51120])==F)
CELL=which(DIV[1:51120]>0 & is.na(ALT[1:51120])==F & is.na(TEMP[1:51120])==F)
ALT=(ALT-mean(ALT))/sd(ALT); summary(ALT)
ALT_VAL=(ALT[CELL]-mean(ALT[CELL]))/sd(ALT[CELL]); summary(ALT_VAL)
TEMP_VAL=(TEMP[CELL]-mean(TEMP[CELL]))/sd(TEMP[CELL]); summary(TEMP_VAL)
DIV_VAL=(DIV[CELL]-mean(DIV[CELL]))/sd(DIV[CELL]); summary(DIV_VAL)
PREC_ANN_VAL=(PREC_ANN[CELL]-mean(PREC_ANN[CELL]))/sd(PREC_ANN[CELL]); summary(PREC_ANN_VAL)
PREC_SEA_VAL=(PREC_SEA[CELL]-mean(PREC_SEA[CELL]))/sd(PREC_SEA[CELL]); summary(PREC_SEA_VAL)
NDVI_VAL=(NDVI[CELL]-mean(NDVI[CELL]))/sd(NDVI[CELL]); summary(NDVI_VAL)
MO=glm(DIV_VAL ~ ALT_VAL + NDVI_VAL + TEMP_VAL + PREC_SEA_VAL + PREC_ANN_VAL)
summary(M0)
M0=glm(DIV_VAL ~ ALT_VAL + NDVI_VAL + TEMP_VAL + PREC_SEA_VAL + PREC_ANN_VAL)
summary(M0)
plot(M0)
XYFromCell[CELL]
xyFromCell[CELL]
xyFromCell(DIV,CELL)
COOR=project(xyFromCell(DIV,CELL), "+proj=cea +datum=WGS84 +lat_ts=30", inv=T)
library(raster); library(spdep); library(ncf) ; library(proj4)
install.packages("spdep")
library(raster); library(spdep); library(ncf) ; library(proj4)
install.packages("ncf")
library(raster); library(spdep); library(ncf) ; library(proj4)
install.packages("proj4")
library(raster); library(spdep); library(ncf) ; library(proj4)
COOR=project(xyFromCell(DIV,CELL), "+proj=cea +datum=WGS84 +lat_ts=30", inv=T)
summary(COOR)
plot(COOR)
knn2b
Neig1=knn2nb(knearneigh(COOR,1, longlat = T))
Neig=knn2nb(knearneigh(COOR,1, longlat = T)); N1=nb2listw(Neig,style="W",zero.policy =T)
Neig=knn2nb(knearneigh(COOR,2, longlat = T)); N2=nb2listw(Neig,style="W",zero.policy =T)
Neig=knn2nb(knearneigh(COOR,3, longlat = T)); N3=nb2listw(Neig,style="W",zero.policy =T)
Neig=knn2nb(knearneigh(COOR,4, longlat = T)); N4=nb2listw(Neig,style="W",zero.policy =T)
Neig=knn2nb(knearneigh(COOR,5, longlat = T)); N5=nb2listw(Neig,style="W",zero.policy =T)
Neig=knn2nb(knearneigh(COOR,6, longlat = T)); N6=nb2listw(Neig,style="W",zero.policy =T)
Neig=knn2nb(knearneigh(COOR,7, longlat = T)); N7=nb2listw(Neig,style="W",zero.policy =T)
Neig=knn2nb(knearneigh(COOR,8, longlat = T)); N8=nb2listw(Neig,style="W",zero.policy =T)
Neig=knn2nb(knearneigh(COOR,8, longlat = T)); N8=nb2listw(Neig,style="W",zero.policy =T)
M1=errorsarlm(formula, listw, zero.policy=T)
M1=errorsarlm(DIV_VAL ~ ALT_VAL + NDVI_VAL + TEMP_VAL + PREC_SEA_VAL + PREC_ANN_VAL, N1, zero.policy=T)
M1=errorsarlm(DIV_VAL ~ ALT_VAL + NDVI_VAL + TEMP_VAL + PREC_SEA_VAL + PREC_ANN_VAL, listw=N1, zero.policy=T)
M2=errorsarlm(DIV_VAL ~ ALT_VAL + NDVI_VAL + TEMP_VAL + PREC_SEA_VAL + PREC_ANN_VAL, listw=N2, zero.policy=T)
aic(M0)
AIC(M0)
AIC(M1)
M3=errorsarlm(DIV_VAL ~ ALT_VAL + NDVI_VAL + TEMP_VAL + PREC_SEA_VAL + PREC_ANN_VAL, listw=N3, zero.policy=T)
AIC(M2)
AIC(M3)
smmary(M3)
summary(M3)
summary(M0)
M8=errorsarlm(DIV_VAL ~ ALT_VAL + NDVI_VAL + TEMP_VAL + PREC_SEA_VAL + PREC_ANN_VAL, listw=N8, zero.policy=T)
AIC(M8)
AIC(M3)
summary(M8)
summary(M3)
write.table(predict.sarlm(M3), ”TEMP_FILE.txt")
write.table(predict.sarlm(M3), ”TEMP_FILE.txt")
write.table(predict.sarlm(M3), "TEMP_FILE.txt")
read.table("TEMP_FILE.txt") ->PREDICT
file.remove("TEMP_FILE.txt")
cor(DIV, PREDICT[,1])^2
cor(DIV_VAL, PREDICT[,1])^2
cor(DIV_VAL, PREDICT[,2])^2
cor(DIV_VAL, PREDICT[,3])^2
predict.sarlm(M3)
summary(M3)
correlog(COOR[,1], COOR[,2], M3$resid, increment =500, resamp=R,latlon=T)
correlog(COOR[,1], COOR[,2], M3$resid, increment =500, resamp=100,latlon=T)
plot(correlog(COOR[,1], COOR[,2], M3$resid, increment =500, resamp=20,latlon=T))
plot(correlog(COOR[,1], COOR[,2], M0$resid, increment =500, resamp=20,latlon=T))
plot(correlog(COOR[,1], COOR[,2], M8$resid, increment =500, resamp=20,latlon=T))
install.packages("paleobioDB")
library(paleobioDB)
?pbdb_occurrences
cav<-pbdb_occurrences(base_name="Caviomorpha",ident="latest",
continent="SOA",limit="all",max_ma=23.03,timerule="contain",
show=c("coords","loc","paleoloc","ident","phylo"),created_before='2016-10-30')
str(cav)
cav$mag<-(cav$eag+cav$lag)/2
# you should be critical and evaluate that the raw data you download is correct before do any analysis.
#check for instances the genera names
levels(cav$gnl)
head(cav)
plot(cav$mag,cav$lat)
plot(cav$lng,cav$lat)
hist(cav$mag)
plot(table(cav$mna))
pbdb_map_occur(cav,res=5)
pbdb_map_occur(cav, col.int="white",col.ocean="gray",xlim=c(-85,-35),ylim=c(-55,13),res=1)
samp.effort<-pbdb_map_occur(cav,res=1)
samp.effort
pbdb_map_richness(cav,res=5,rank="species")
pbdb_map_richness(cav,res=2,rank="species",col.int="white",col.ocean="gray",xlim=c(-85,-35),ylim=c(-55,13))
pbdb_richness(cav,rank="species",temporal_extent=c(5,23.03))
pbdb_temp_range(cav,rank="genus")
pbdb_temp_range(cav,rank="genus")
?pbdb_orig_ext
pbdb_temp_range(cav,rank="genus")
pbdb_orig_ext(cav,rank="genus",temporal_extent=c(0,23.03),orig_ext=1,res=2)
pbdb_orig_ext(cav,rank="genus",temporal_extent=c(0,23.03),orig_ext=2,res=2)
?pbdb_subtaxa
pbdb_subtaxa(cav)
pbdb_temporal_resolution(cav)
library(speciesgeocodeR)
occ.exmpl<- data.frame(species = sample(letters, size = 250, replace = TRUE),
decimallongitude = runif(n = 250, min = 42, max = 51),
decimallatitude = runif(n = 250, min = -26, max = -11))
pol.exmpl <-
SpatialPolygonsDataFrame(
SpatialPolygons(
list(Polygons(list(Polygon(cbind(c(44, 46, 46, 44, 44),
c(-24, -24, -13, -13, -24)))), ID = '1'),
Polygons(list(Polygon(cbind(c(47, 50, 50, 47, 47),
c(-24, -24, -13, -13, -24)))), ID = '2'))),
data.frame(areas = c("Polygon1", "Polygon2")))
outp <- SpGeoCod(occ.exmpl, pol.exmpl, areanames = "areas")
outp
as.data.frame.spgeoOUT <- function(x, ...){
data.frame(x$spec_table)
}
as.data.frame(outp)
?as
library(speciesgeocodeR)
as(outp,"data.frame")
?is.data.frame
library(speciesgeocodeR)
is.data.frame
?inherits
as.data.frame(outp)
as(outp,"data.frame")
is.data.frame
is.spgeoOUT <- function(x){
inherits(x, "spgeoOUT")
}
is.spgeoOUT(outp)
library(speciesgeocodeR)
library(speciesgeocodeR)
as(outp,"data.frame")
as.data.frame(outp)
is.spgeoOUT(outp)
library(speciesgeocodeR)
str(outp)
library(formatR)
tidy_source()
MapRichness(outp)
outp
x <- outp
pol <- fortify(x$polygons)
library(ggplot2)
pol <- fortify(x$polygons)
head(pol)
fortify
num <- data.frame(poly = colnames(x$polygon_table),
spec.num = t(x$polygon_table),
row.names = NULL, stringsAsFactors = F)
num$poly <- gsub("[[:punct:]]", " ", as.character(num$poly))
pol <- ggplot2::fortify(x$polygons)
pol <- merge(pol, t(x$polygon_table))
x$polygon_table
colnames(x$polygon_table)
num <- data.frame(poly = names(x$polygon_table),
spec.num = t(x$polygon_table),
row.names = NULL, stringsAsFactors = F)
num$poly <- gsub("[[:punct:]]", " ", as.character(num$poly))
outp
spsum <- outp$spec_table
spsum[spsum > 1]
spsum[spsum > 1,]
apply(spsum,1, function(x){x[x > 1] <- 1)
apply(spsum, 1, function(x){x[x > 1] <- 1})
apply(spsum, 2, function(x){x[x > 1] <- 1})
spsum
spsum
is(spsum)
spsum[spsum < .1] <- 0
spsum
spsum[spsum > 1] <- 1
spsum
names(x$polygons)
x$polygons
head(x$polygons)
fortify
?fortify
?fortify.SpatialPolygonsDataframe
?fortify.SpatialPolygonsDataFrame
x
pol <- ggplot2::fortify(x$polygons, region = x$areanam)
library(rgeos)
pol <- ggplot2::fortify(x$polygons, region = x$areanam)
x$areanam
pol <- ggplot2::fortify(model = x$polygons, region = x$areanam)
ggplot2::fortify(model = x$polygons, region = x$areanam)
fortify.fortify.SpatialPolygonsDataFrame
fortify.SpatialPolygonsDataFrame
ggplot2::fortify.SpatialPolygonsDataFrame
ggplot2::fortify.SpatialPolygonsDataFrame()
ggplot2:::fortify.SpatialPolygonsDataFrame()
ggplot2:::fortify.SpatialPolygonsDataFrame
x$areanam
pol <- ggplot2::fortify(model = x$polygons, region = "areas")
xpolygons
x$polygons
pol <- ggplot2::fortify(model = x$polygons)
pol
as.data.frame(x$polygons)
dat <- WWFload()
dat <- WWFLoad()
tt <- WwfLoad()
unique(x$polygons@data[, x$areanam]
)
num
?SPCbind
?SPcbind
dim(tt@data)
head(dim@data)
head(tt@data)
map.kreise.df <- as(x$polygons, "data.frame")
map.kreise.df
x$polygon_table
data.frame(t(x$polygon_table))
data.frame(x$polygon_table)
map.kreise.df
merge(map.kreise.df, data.frame(x$polygon_table), sort=FALSE, by.x=x$areanam,
>    by.y="row.names", all.x=TRUE)
map.kreise.df1 <- merge(map.kreise.df, data.frame(x$polygon_table), sort=FALSE, by.x=x$areanam,
by.y="row.names", all.x=TRUE)
map.krese.df1
map.kreise.df1
pol.df <- as(x$polygons, "data.frame")
pol.df <- merge(map.kreise.df, data.frame(x$polygon_table), sort=FALSE, by.x=x$areanam,
by.y="row.names", all.x=TRUE)
pol <- SpatialPolygonsDataFrame(as(x$polygons, "SpatialPolygons"), data=pol.df)
pol <- ggplot2::fortify(model = pol)
pol
merge(pol.f, pol@data, by="id")
pol.df <- as(x$polygons, "data.frame")
pol.df <- merge(map.kreise.df, data.frame(x$polygon_table), sort=FALSE, by.x=x$areanam,
by.y="row.names", all.x=TRUE)
pol <- SpatialPolygonsDataFrame(as(x$polygons, "SpatialPolygons"), data=pol.df)
pol.f <- ggplot2::fortify(model = pol)
merge(pol.f, pol@data, by="id")
pol@data
pol.f <- ggplot2::fortify(model = pol, region = "areas")
pol.f
dd <- fortify(tt)
dim(dd)
unique(dd$id)
lentgh(unique(dd$id))
length(unique(dd$id))
dim(tt@data)
head(tt@data)
tail(tt@data)
tail(unique(dd$id))
head(unique(dd$id))
head(pol)
pol <- ggplot2::fortify(model = x$polygons)
pol <- merge(pol.f, x$polygons@data, by.x="id", by.y = "row.names")
head(pol)
data.frame(x$polygon_table)
pol.df <- as(x$polygons, "data.frame")
pol.df
library(speciesgeocodeR)
occ.exmpl<- data.frame(species = sample(letters, size = 250, replace = TRUE),
decimallongitude = runif(n = 250, min = 42, max = 51),
decimallatitude = runif(n = 250, min = -26, max = -11))
pol.exmpl <-
SpatialPolygonsDataFrame(
SpatialPolygons(
list(Polygons(list(Polygon(cbind(c(44, 46, 46, 44, 44),
c(-24, -24, -13, -13, -24)))), ID = '1'),
Polygons(list(Polygon(cbind(c(47, 50, 50, 47, 47),
c(-24, -24, -13, -13, -24)))), ID = '2'))),
data.frame(areas = c("Polygon1", "Polygon2")))
outp <- SpGeoCod(occ.exmpl, pol.exmpl, areanames = "areas")
occ.exmpl<- data.frame(species = sample(letters, size = 250, replace = TRUE),
decimallongitude = runif(n = 250, min = 42, max = 51),
decimallatitude = runif(n = 250, min = -26, max = -11))
pol.exmpl <-
SpatialPolygonsDataFrame(
SpatialPolygons(
list(Polygons(list(Polygon(cbind(c(44, 46, 46, 44, 44),
c(-24, -24, -13, -13, -24)))), ID = '1'),
Polygons(list(Polygon(cbind(c(47, 50, 50, 47, 47),
c(-24, -24, -13, -13, -24)))), ID = '2'))),
data.frame(areas = c("Polygon1", "Polygon2")))
library(speciesgeocodeR)
occ.exmpl<- data.frame(species = sample(letters, size = 250, replace = TRUE),
decimallongitude = runif(n = 250, min = 42, max = 51),
decimallatitude = runif(n = 250, min = -26, max = -11))
pol.exmpl <-
SpatialPolygonsDataFrame(
SpatialPolygons(
list(Polygons(list(Polygon(cbind(c(44, 46, 46, 44, 44),
c(-24, -24, -13, -13, -24)))), ID = '1'),
Polygons(list(Polygon(cbind(c(47, 50, 50, 47, 47),
c(-24, -24, -13, -13, -24)))), ID = '2'))),
data.frame(areas = c("Polygon1", "Polygon2")))
outp <- SpGeoCod(occ.exmpl, pol.exmpl, areanames = "areas")
x <- outp
pol <- ggplot2::fortify(model = x$polygons)
pol <- merge(pol.f, x$polygons@data, by.x="id", by.y = "row.names")
pol
x$polygons@data
library(speciesgeocodeR)
occ.exmpl<- data.frame(species = sample(letters, size = 250, replace = TRUE),
decimallongitude = runif(n = 250, min = 42, max = 51),
decimallatitude = runif(n = 250, min = -26, max = -11))
pol.exmpl <-
SpatialPolygonsDataFrame(
SpatialPolygons(
list(Polygons(list(Polygon(cbind(c(44, 46, 46, 44, 44),
c(-24, -24, -13, -13, -24)))), ID = '1'),
Polygons(list(Polygon(cbind(c(47, 50, 50, 47, 47),
c(-24, -24, -13, -13, -24)))), ID = '2'))),
data.frame(areas = c("Polygon1", "Polygon2")))
outp <- SpGeoCod(occ.exmpl, pol.exmpl, areanames = "areas")
x <- outp
pol <- ggplot2::fortify(model = x$polygons)
pol <- merge(pol.f, x$polygons@data, by.x="id", by.y = "row.names")
pol
x
library(speciesgeocodeR)
occ.exmpl<- data.frame(species = sample(letters, size = 250, replace = TRUE),
decimallongitude = runif(n = 250, min = 42, max = 51),
decimallatitude = runif(n = 250, min = -26, max = -11))
pol.exmpl <-
SpatialPolygonsDataFrame(
SpatialPolygons(
list(Polygons(list(Polygon(cbind(c(44, 46, 46, 44, 44),
c(-24, -24, -13, -13, -24)))), ID = '1'),
Polygons(list(Polygon(cbind(c(47, 50, 50, 47, 47),
c(-24, -24, -13, -13, -24)))), ID = '2'))),
data.frame(areas = c("Polygon1", "Polygon2")))
outp <- SpGeoCod(occ.exmpl, pol.exmpl, areanames = "areas")
x <- outp
pol <- ggplot2::fortify(model = x$polygons)
pol <- merge(pol.f, x$polygons@data, by.x="id", by.y = "row.names")
pol
x
library(speciesgeocodeR)
occ.exmpl<- data.frame(species = sample(letters, size = 250, replace = TRUE),
decimallongitude = runif(n = 250, min = 42, max = 51),
decimallatitude = runif(n = 250, min = -26, max = -11))
pol.exmpl <-
SpatialPolygonsDataFrame(
SpatialPolygons(
list(Polygons(list(Polygon(cbind(c(44, 46, 46, 44, 44),
c(-24, -24, -13, -13, -24)))), ID = '1'),
Polygons(list(Polygon(cbind(c(47, 50, 50, 47, 47),
c(-24, -24, -13, -13, -24)))), ID = '2'))),
data.frame(areas = c("Polygon1", "Polygon2")))
outp <- SpGeoCod(occ.exmpl, pol.exmpl, areanames = "areas")
pol <- ggplot2::fortify(model = x$polygons)
pol <- merge(pol.f, x$polygons@data, by.x="id", by.y = "row.names")
pol
e <- raster::extent(x$polygons) + 1
bgmap <- speciesgeocodeR::landmass
bgmap <- raster::crop(bgmap, e)
bgmap <- ggplot2::fortify(bgmap)
pol <- ggplot2::fortify(model = x$polygons)
pol <- merge(pol.f, x$polygons@data, by.x="id", by.y = "row.names")
head(pol)
ggplot2::ggplot()+
ggplot2::geom_polygon(bgmap, aes_string(x = "long", y = "lat", group = "group"), col = "grey60")+
ggplot2::geom_polygon(pol, aes_string(x = "long", y = "lat", group = "group", col = "sppol"))+
ggplot2::coord_fixed()+
ggplot2::theme_bw()
e <- raster::extent(x$polygons) + 1
bgmap <- speciesgeocodeR::landmass
bgmap <- raster::crop(bgmap, e)
bgmap <- ggplot2::fortify(bgmap)
head(bgmap)
pol <- ggplot2::fortify(model = x$polygons)
pol <- merge(pol.f, x$polygons@data, by.x="id", by.y = "row.names")
head(pol)
ggplot2::ggplot()+
ggplot2::geom_polygon(bgmap, aes_string(x = "long", y = "lat", group = "group"), col = "grey60")
bgmap
ggplot2::ggplot()+
ggplot2::geom_path(bgmap, aes_string(x = "long", y = "lat", group = "group"), col = "grey60")
ggplot2::ggplot()+
ggplot2::geom_polygon(data = bgmap,
aes_string(x = "long", y = "lat", group = "group"),
col = "grey60")
ggplot2::ggplot()+
ggplot2::geom_polygon(data = bgmap,
aes_string(x = "long", y = "lat", group = "group"),
col = "grey60")+
ggplot2::geom_polygon(data = pol,
aes_string(x = "long", y = "lat", group = "group", col = "sppol"))
ggplot2::ggplot()+
ggplot2::geom_polygon(data = bgmap,
aes_string(x = "long", y = "lat", group = "group"),
col = "grey60")+
ggplot2::geom_polygon(data = pol,
aes_string(x = "long", y = "lat", group = "group", fill = "sppol"))
?scale_fill_viridis
library(viridis)
?scale_fill_viridis
head(x)
plo.out <- ggplot2::ggplot()+
ggplot2::geom_polygon(data = bgmap,
aes_string(x = "long", y = "lat", group = "group"),
col = "grey60")+
ggplot2::geom_polygon(data = pol,
aes_string(x = "long", y = "lat", group = "group", fill = "sppol"))+
ggplot2::coord_fixed()+
ggplot2::theme_bw()
plo.out +
scale_fill_viridis(options = 'inferno', discrete = T)
plo.out +
scale_fill_viridis(option = 'inferno', discrete = T)
str(pol)
as.integer(pol$sppol)
pol$sppol <- as.integer(pol$sppol)
str(pol)
plo.out +
scale_fill_viridis(option = 'inferno', discrete = T)
plo.out <- ggplot2::ggplot()+
ggplot2::geom_polygon(data = bgmap,
aes_string(x = "long", y = "lat", group = "group"),
col = "grey60")+
ggplot2::geom_polygon(data = pol,
aes_string(x = "long", y = "lat", group = "group", fill = "sppol"))+
ggplot2::coord_fixed()+
ggplot2::theme_bw()
plo.out +
scale_fill_viridis(option = 'inferno', discrete = T)
plo.out +
scale_fill_viridis(options = 'inferno', discrete = F)
plo.out +
scale_fill_viridis(option = 'inferno', discrete = F)
plo.out +
scale_fill_viridis(option = 'viridis')
plo+
geom_poins(data = x$samples, aes_string(x = 'decimallongitude', y = 'decimallatitude'),
col = "red")
plo.out+
geom_poins(data = x$samples, aes_string(x = 'decimallongitude', y = 'decimallatitude'),
col = "red")
plo.out+
geom_poin(data = x$samples, aes_string(x = 'decimallongitude', y = 'decimallatitude'),
col = "red")
plo.out+
geom_points(data = x$samples, aes_string(x = 'decimallongitude', y = 'decimallatitude'),
col = "red")
plo.out+
geom_point(data = x$samples, aes_string(x = 'decimallongitude', y = 'decimallatitude'),
col = "red")
tidy_source()
library(speciesgeocodeR)
MapRichness(outp)
library(speciesgeocodeR)
MapRichness(outp)
MapRichness(outp, show.occ = T)
MapRichness(outp, show.occ = T, buffer = 10)
library(speciesgeocodeR)
MapRichness(outp)
str(x)
tidy_source
tidy_source()
?missing
dat <- read.csv("C:/Users/alexander.zizka/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Conferences/2016_11_Antonelli_lab_meeting/0026470-160910150852091.csv", sep = "\t")
CleanCoordinates(outp$samples[,1:2])
outp$samples[,1:2]
library(speciesgeocodeR)
dat <- CleanCoordinates(outp$samples[,2:3])
plot(dat)
summary(dat)
x <- dat
out <- apply(x[,-c(1,2)], 2, "!")
apply(out[,-c(1,2)], 2, "sum")
print(apply(out[,-c(1,2)], 2, "sum"))
print("Flagged Records")
print(apply(out[,-c(1,2)], 2, "sum"))
summary.spatialvalid <- function(x){
out <- apply(x[,-c(1,2)], 2, "!")
print("Flagged Records")
print(apply(out[,-c(1,2)], 2, "sum"))
}
summary(dat)
print(Flagged Records)
library(speciesgeocodeR)
library(mapdata)
install.packages("mapdata")
library(mapdata)
rivers
dat <- rivers
dat
is(dat)
plot(rivers)
data(rivers)
rivers
map(rivers)
map("rivers")
map(world2Hires)
libPaths()
.libPaths()
