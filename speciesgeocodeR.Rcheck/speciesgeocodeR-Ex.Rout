
R Under development (unstable) (2017-11-20 r73757) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "speciesgeocodeR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "speciesgeocodeR-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('speciesgeocodeR')
Loading required package: sp
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CalcRange")
> ### * CalcRange
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CalcRange
> ### Title: Range Polygons from Occurrence Points
> ### Aliases: CalcRange
> ### Keywords: Range size
> 
> ### ** Examples
> 
> occ.exmpl<- data.frame(species = sample(letters, size = 250, replace = TRUE),
+                        decimallongitude = runif(n = 250, min = 42, max = 51),
+                        decimallatitude = runif(n = 250, min = -26, max = -11))
> 
> CalcRange(occ.exmpl, method = "pseudospherical", terrestrial = FALSE)
Warning in CalcRange(occ.exmpl, method = "pseudospherical", terrestrial = FALSE) :
  Assuming lat/long wgs84 coordinates
class       : SpatialPolygonsDataFrame 
features    : 26 
extent      : 42.01653, 50.9647, -25.9285, -11.06052  (xmin, xmax, ymin, ymax)
coord. ref. : +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0 
variables   : 1
names       : species 
min values  :       a 
max values  :       z 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CalcRange", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CalcRangeSize")
> ### * CalcRangeSize
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CalcRangeSize
> ### Title: Species Range Size from Occurrence Records
> ### Aliases: CalcRangeSize
> ### Keywords: Range size
> 
> ### ** Examples
> 
> occ.exmpl<- data.frame(species = sample(letters, size = 250, replace = TRUE),
+                        decimallongitude = runif(n = 250, min = 42, max = 51),
+                        decimallatitude = runif(n = 250, min = -26, max = -11))
> 
> CalcRangeSize(occ.exmpl, method = 'eoo_pseudospherical', terrestrial = FALSE, 
+               convex.reps = 2)
Warning in CalcRangeSize(occ.exmpl, method = "eoo_pseudospherical", terrestrial = FALSE,  :
  Assuming lat/long wgs84 coordinates
Warning in FUN(X[[i]], ...) : 'repfrac' to small, repsize set to 5
     range
1   137694
2   358194
3   414112
4   603608
5   678212
6   522464
7   797017
8   866435
9  1086798
10  483587
11  414645
12  598117
13  712520
14  616841
15  719803
16  609564
17 1161158
18  489575
19  816244
20  633786
21  641332
22  313900
23  668191
24  589814
25  766626
26  186577
> CalcRangeSize(occ.exmpl, method = 'maxdist', terrestrial = FALSE)
Warning in CalcRangeSize(occ.exmpl, method = "maxdist", terrestrial = FALSE) :
  Assuming lat/long wgs84 coordinates
  range
a  1258
b  1161
c  1025
d  1228
e  1365
f  1005
g  1616
h  1275
i  1692
j  1176
k  1223
l  1109
m  1254
n  1443
o  1435
p  1518
q  1697
r  1502
s  1471
t  1366
u  1276
v   824
w  1574
x  1403
y  1614
z   906
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CalcRangeSize", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CladeByTrait")
> ### * CladeByTrait
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CladeByTrait
> ### Title: Extract Clades Based on Trait Values
> ### Aliases: CladeByTrait
> ### Keywords: Area classification
> 
> ### ** Examples
> 
> sp.nam <-  unique(paste(sample(letters, size = 250, replace = TRUE), 
+                         sample(letters, size = 250, replace = TRUE),
+ 			                  sep = ""))
> tr.dat <- sample(c(0,1), size = length(sp.nam), replace = TRUE)
> trait <- data.frame(species = sp.nam, trait = tr.dat)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CladeByTrait", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("DESin")
> ### * DESin
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: DESin
> ### Title: Create Input Files for DES-PyRate
> ### Aliases: DESin is.DESin
> ### Keywords: Area classification PyRate
> 
> ### ** Examples
> 
> fos <- data.frame(species= rep(letters[1:4],25),
+                   earliestAge = runif(100, min = 60, max = 100),
+                   latestAge = runif(100, min = 0, max = 60),
+                   area = sort(rep(c("A", "B"), 50)))
> 
> rec <- data.frame(species = c(letters[1:4], letters[1:2]),
+                   area = c(rep("A",4), rep("B", 2)))
> 
> exp1 <- DESin(fos, rec, bin.size = 2, reps = 3)
Warning in DESin(fos, rec, bin.size = 2, reps = 3) :
  column midpointage not found, calculating from earliestage and latestage
> 
> summary(exp1)
$Number_of_areas
[1] 2

$Input_Data
                  Area_1 Area_2
Minimum_age         35.7   37.4
Maximum_age         78.4   76.3
Number of records   50.0   50.0
Mean record age     55.7   56.1
Number of taxa       4.0    4.0
Mean taxon age      40.6   40.3

$Number_of_Replicates
[1] 3

> #plot(exp1)
> 
> ## Not run: 
> ##D write.DES.in(exp1, file = "Example1_DES_in")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("DESin", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("IUCNest")
> ### * IUCNest
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: IUCNest
> ### Title: Convert Range Sizes to IUCN Assessment
> ### Aliases: IUCNest
> ### Keywords: Range size
> 
> ### ** Examples
> 
> occ.exmpl<- data.frame(species = sample(letters, size = 250, replace = TRUE),
+                        decimallongitude = runif(n = 250, min = 42, max = 51),
+                        decimallatitude = runif(n = 250, min = -26, max = -11))
> 
> rang <- CalcRange(occ.exmpl, method = 'pseudospherical', terrestrial = FALSE)
Warning in CalcRange(occ.exmpl, method = "pseudospherical", terrestrial = FALSE) :
  Assuming lat/long wgs84 coordinates
> IUCNest(rang)
Warning in IUCNest(rang) :
  probability based on assessment from AOO and EOO
   AOO EOO both IUCN50 IUCN100 IUCN500
1   DD  DD   DD      0       0       0
2   DD  DD   DD      0       0       0
3   DD  DD   DD      0       0       0
4   DD  DD   DD      0       0       0
5   DD  DD   DD      0       0       0
6   DD  DD   DD      0       0       0
7   DD  DD   DD      0       0       0
8   DD  DD   DD      0       0       0
9   DD  DD   DD      0       0       0
10  DD  DD   DD      0       0       0
11  DD  DD   DD      0       0       0
12  DD  DD   DD      0       0       0
13  DD  DD   DD      0       0       0
14  DD  DD   DD      0       0       0
15  DD  DD   DD      0       0       0
16  DD  DD   DD      0       0       0
17  DD  DD   DD      0       0       0
18  DD  DD   DD      0       0       0
19  DD  DD   DD      0       0       0
20  DD  DD   DD      0       0       0
21  DD  DD   DD      0       0       0
22  DD  DD   DD      0       0       0
23  DD  DD   DD      0       0       0
24  DD  DD   DD      0       0       0
25  DD  DD   DD      0       0       0
26  DD  DD   DD      0       0       0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("IUCNest", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("MapRichness")
> ### * MapRichness
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: MapRichness
> ### Title: Plotting Species Richness in a Set of Polygons
> ### Aliases: MapRichness
> ### Keywords: Diversity pattern Visualisation
> 
> ### ** Examples
> 
> data(lemurs)
> data(mdg_biomes)
> 
> outp <- SpGeoCod(lemurs, mdg_biomes, areanames = 'name')
> ## Not run: 
> ##D MapRichness(outp)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("MapRichness", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("PlotHull")
> ### * PlotHull
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: PlotHull
> ### Title: Plotting Species Ranges
> ### Aliases: PlotHull
> ### Keywords: Range size Visualisation
> 
> ### ** Examples
> 
> #simulate example occurrences
> occ.exmpl<- data.frame(species = sample(letters, size = 250, replace = TRUE),
+                        decimallongitude = runif(n = 250, min = 42, max = 51),
+                        decimallatitude = runif(n = 250, min = -26, max = -11))
> 
> 
> dat <- CalcRange(occ.exmpl, method = "pseudospherical", terrestrial = FALSE)
Warning in CalcRange(occ.exmpl, method = "pseudospherical", terrestrial = FALSE) :
  Assuming lat/long wgs84 coordinates
> ## Not run: 
> ##D PlotHull(dat)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("PlotHull", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("RangeRichness")
> ### * RangeRichness
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RangeRichness
> ### Title: Species Richness Raster from Range Polygons
> ### Aliases: RangeRichness
> ### Keywords: Range size Diversity pattern
> 
> ### ** Examples
> 
> #simulate example occurrences
> occ.exmpl<- data.frame(species = sample(letters, size = 250, replace = TRUE),
+                        decimallongitude = runif(n = 250, min = 42, max = 51),
+                        decimallatitude = runif(n = 250, min = -26, max = -11))
> 
> rang <- CalcRange(occ.exmpl, method = 'pseudospherical')
Warning in CalcRange(occ.exmpl, method = "pseudospherical") :
  Assuming lat/long wgs84 coordinates
> sprich <- RangeRichness(rang)
Error in .doXYFromCell(object@ncols, object@nrows, e@xmin, e@xmax, e@ymin,  : 
  dims [product 2] do not match the length of object [20]
Calls: RangeRichness ... SpatialPoints -> coordinates -> xyFromCell -> .doXYFromCell
Execution halted
