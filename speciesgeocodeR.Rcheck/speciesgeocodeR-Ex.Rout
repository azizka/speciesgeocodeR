
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "speciesgeocodeR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "speciesgeocodeR-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('speciesgeocodeR')
Loading required package: maps

 # maps v3.1: updated 'world': all lakes moved to separate new #
 # 'lakes' database. Type '?world' or 'news(package="maps")'.  #


> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CalcRange")
> ### * CalcRange
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CalcRange
> ### Title: Range polygons, AOO and EOO from occurrence points
> ### Aliases: CalcRange
> ### Keywords: spatial
> 
> ### ** Examples
> 
> data(lemurs)
> CalcRange(lemurs, index = c("AOO", "EOO"), eoo.value = "area", eoo.terrestrial = FALSE)
Warning in CalcRange(lemurs, index = c("AOO", "EOO"), eoo.value = "area",  :
  Using Euclidean convex hull algorithm on lat/long
Warning in CalcRange(lemurs, index = c("AOO", "EOO"), eoo.value = "area",  :
  the following species have less than 3 occurrence, values set to NA:
 Daubentonia madagascariensis
 Eulemur collaris
 Eulemur rufifrons
 Eulemur rufus
 Eulemur sanfordi
 Lepilemur septentrionalis
 Microcebus griseorufus
 Microcebus lehilahytsara
 Microcebus ravelobensis
 Propithecus candidus
 Propithecus coronatus
 Propithecus deckenii
 Propithecus tattersalli
Warning in CalcRange(lemurs, index = c("AOO", "EOO"), eoo.value = "area",  :
  no CRS for AOO calculation found. Using cylindrical equal area
Warning in CalcRange(lemurs, index = c("AOO", "EOO"), eoo.value = "area",  :
  aoo.gridsize not found. Set to 4 sqkm
[1] EOO AOO
<0 rows> (or 0-length row.names)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CalcRange", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CleanCoordinates")
> ### * CleanCoordinates
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CleanCoordinates
> ### Title: Geographic Cleaning of Coordinates from Biologic Collections
> ### Aliases: CleanCoordinates
> ### Keywords: datagen
> 
> ### ** Examples
> 
> 
> exmpl <- data.frame(species = sample(letters, size = 250, replace = TRUE),
+                     decimallongitude = runif(250, min = 42, max = 51),
+                     decimallatitude = runif(250, min = -26, max = -11))
> 
> test <- CleanCoordinates(exmpl[, 2:3],species = exmpl[, 1], verbose = FALSE)
Warning in CleanCoordinates(exmpl[, 2:3], species = exmpl[, 1], verbose = FALSE) :
  inputformat matrix, countrycheck set to FALSE
Warning in .GBIF(x) :
  running GBIF test, flagging records around Copenhagen
> 
> plot(test)
Regions defined for each Polygons
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CleanCoordinates", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CoExClass")
> ### * CoExClass
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CoExClass
> ### Title: Species Coexistence Matrices in Given Areas.
> ### Aliases: CoExClass
> ### Keywords: spatial
> 
> ### ** Examples
> 
> library(sp)
> data(lemurs)
> data(mdg_poly)
> 
> occ.exmpl<- data.frame(species = sample(letters, size = 250, replace = TRUE),
+                        decimallongitude = runif(n = 250, min = 42, max = 51),
+                        decimallatitude = runif(n = 250, min = -26, max = -11))
> 
> pol.exmpl <- 
+   SpatialPolygonsDataFrame(
+     SpatialPolygons(
+       list(Polygons(list(Polygon(cbind(c(44, 46, 46, 44, 44),
+                                        c(-24, -24, -13, -13, -24)))), ID = '1'),
+            Polygons(list(Polygon(cbind(c(47, 50, 50, 47, 47),
+                                        c(-24, -24, -13, -13, -24)))), ID = '2'))),            
+                            data.frame(areas = c("Polygon1", "Polygon2")))
> 
> outp <- SpGeoCod(occ.exmpl, pol.exmpl, areanames = "areas")
> outpcoex <- CoExClass(outp)
> outpcoex$coexistence_classified
    a   b   c   d   e   f   g   h   i   j   k   l   m n   o   p q r   s   t   u
a 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
b 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
c 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
d 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
e 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
f 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
g 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
h 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
i 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
j 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
k 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
l 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
m 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
n   0   0   0   0   0   0   0   0   0   0   0   0   0 0   0   0 0 0   0   0   0
o 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
p 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
q   0   0   0   0   0   0   0   0   0   0   0   0   0 0   0   0 0 0   0   0   0
r   0   0   0   0   0   0   0   0   0   0   0   0   0 0   0   0 0 0   0   0   0
s 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
t 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
u 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
v   0   0   0   0   0   0   0   0   0   0   0   0   0 0   0   0 0 0   0   0   0
w 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
x 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
y 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
z 100 100 100 100 100 100 100 100 100 100 100 100 100 0 100 100 0 0 100 100 100
  v   w   x   y   z
a 0 100 100 100 100
b 0 100 100 100 100
c 0 100 100 100 100
d 0 100 100 100 100
e 0 100 100 100 100
f 0 100 100 100 100
g 0 100 100 100 100
h 0 100 100 100 100
i 0 100 100 100 100
j 0 100 100 100 100
k 0 100 100 100 100
l 0 100 100 100 100
m 0 100 100 100 100
n 0   0   0   0   0
o 0 100 100 100 100
p 0 100 100 100 100
q 0   0   0   0   0
r 0   0   0   0   0
s 0 100 100 100 100
t 0 100 100 100 100
u 0 100 100 100 100
v 0   0   0   0   0
w 0 100 100 100 100
x 0 100 100 100 100
y 0 100 100 100 100
z 0 100 100 100 100
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CoExClass", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:sp'

> nameEx("DESin")
> ### * DESin
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: DESin
> ### Title: Create input files for DES-PyRate
> ### Aliases: DESin
> ### Keywords: datgen
> 
> ### ** Examples
> 
> fos <- data.frame(scientificName = rep(letters[1:4],25),
+                   earliestAge = runif(100, min = 60, max = 100),
+                   latestAge = runif(100, min = 0, max = 60),
+                   higherGeography = sort(rep(c("A", "B"), 50)))
> 
> rec <- data.frame(scientificName = c(letters[1:4], letters[1:2]),
+                   higherGeography = c(rep("A",4), rep("B", 2)))
> 
> exp1 <- DESin(fos, rec, bin.size = 2, reps = 3)
Warning in DESin(fos, rec, bin.size = 2, reps = 3) :
  column midpointAge not found, calculating from earliestAge and latestAge
> 
> summary(exp1)
$Number_of_areas
[1] 2

$Data
                    Area_1   Area_2
Timerange_min     35.72043 37.41531
Timerange_max     78.44926 76.30481
Number of records 50.00000 50.00000
Mean record age   55.70000 56.10000
Number of taxa     4.00000  4.00000
Mean taxon age    40.60000 40.30000

$Number_of_Replicates
[1] 3

> 
> par(ask = TRUE)
> plot(exp1)
Warning in plot.DESin(exp1) :
  no coordinates found, no locations are plotted
Warning: NAs introduced by coercion
Error in xy.coords(x, y) : object 'are1' not found
Calls: plot ... plot.DESin -> .ReplicateAges -> polygon -> xy.coords
Execution halted
