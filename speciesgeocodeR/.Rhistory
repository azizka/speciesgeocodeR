x <- x[,c("scientificname", "decimallongitude", "decimallatitude")]
x$scientificname <- as.character(x$scientificname)
pts <- SpatialPoints(x)
system.time(sp:over(x = pts, y = testpolys)[, "ISO3"])
system.time(sp::over(x = pts, y = testpolys)[, "ISO3"])
pts <- SpatialPoints(x)
x <- x[,2:3]
pts <- SpatialPoints(x)
testpolys <- speciesgeocodeR::countryborders
country <- sp::over(x = pts, y = testpolys)[, "ISO3"]
country
country <- sp::over(x = pts, y = testpolys)
country
country <- as.character(sp::over(x = pts, y = testpolys)[, "ISO3"])
vector("logical", length = dim(x)[1])
system.time(vector("logical", length = dim(x)[1]))
system.time(rep(T, dim(x)[1]))
nrow(x)
out <- rep(T, nrow(x))
which(suppressWarnings(is.na(as.numeric(as.character(x$longitude)))))
is.na(as.numeric(as.character(x$longitude)))
suppressWarnings(as.numeric(as.character(x$longitude))) >
180
suppressWarnings(as.numeric(as.character(x$longitude)))
which(is.na(x$decimallongitude)
is.na(x$decimallongitude)
is.na(x$decimallatitude))
is.na(x$decimallatitude)
out[which(is.na(x$decimallongitude) | is.na(x$decimallatitude))]
is.na(as.numeric(as.character(x$decimallongitude)))
suppressWarnings(as.numeric(as.character(x$decimallongitude))) < -180
na.lon <- is.na(x$decimallongitude)
na.lat <- is.na(x$decimallatitude)
nonum.lon <- suppressWarnings(is.na(as.numeric(as.character(x$decimallongitude))))
nonum.lat <- suppressWarnings(is.na(as.numeric(as.character(x$decimallatitude))))
sma.lon <- suppressWarnings(as.numeric(as.character(x$decimallongitude))) < -180
lar.lon <- suppressWarnings(as.numeric(as.character(x$decimallongitude))) > 180
sma.lat <- suppressWarnings(as.numeric(as.character(x$decimallatitude))) < -90
lar.lat <- suppressWarnings(as.numeric(as.character(x$decimallatitude))) >   90
lar.lat
?Reduce
out <- list(na.lon, na.lat)
Reduce("&", out)
na.lon = T
na.lat = F
out <- list(na.lon, na.lat)
out
Reduce("|", out)
Reduce("&", out)
nonum.lon
out <- list(!is.na(x$decimallongitude),
!is.na(x$decimallatitude),
!suppressWarnings(is.na(as.numeric(as.character(x$decimallongitude)))),
!suppressWarnings(is.na(as.numeric(as.character(x$decimallatitude)))),
!suppressWarnings(as.numeric(as.character(x$decimallongitude))) < -180,
!suppressWarnings(as.numeric(as.character(x$decimallongitude))) > 180,
!suppressWarnings(as.numeric(as.character(x$decimallatitude))) < -90,
!suppressWarnings(as.numeric(as.character(x$decimallatitude))) >   90
)
out
out <- list(na.lon, na.lat)
out <- list(!is.na(x$decimallongitude),
!is.na(x$decimallatitude),
!suppressWarnings(is.na(as.numeric(as.character(x$decimallongitude)))),
!suppressWarnings(is.na(as.numeric(as.character(x$decimallatitude)))),
!suppressWarnings(as.numeric(as.character(x$decimallongitude))) < -180,
!suppressWarnings(as.numeric(as.character(x$decimallongitude))) > 180,
!suppressWarnings(as.numeric(as.character(x$decimallatitude))) < -90,
!suppressWarnings(as.numeric(as.character(x$decimallatitude))) >   90
)
Reduce("&", out)
.ValidCoordinates2 <- function(x) {
out <- list(!is.na(x$decimallongitude),
!is.na(x$decimallatitude),
!suppressWarnings(is.na(as.numeric(as.character(x$decimallongitude)))),
!suppressWarnings(is.na(as.numeric(as.character(x$decimallatitude)))),
!suppressWarnings(as.numeric(as.character(x$decimallongitude))) < -180,
!suppressWarnings(as.numeric(as.character(x$decimallongitude))) > 180,
!suppressWarnings(as.numeric(as.character(x$decimallatitude))) < -90,
!suppressWarnings(as.numeric(as.character(x$decimallatitude))) >   90
)
out <- Reduce("&", out)
}
system.time(.ValidCoordinates(x[,2:3]))
system.time(.ValidCoordinates(x[,2:3]))
li brary(speciesgeocodeR)
library(speciesgeocodeR)
system.time(.ValidCoordinates(x[,2:3]))
system.time(speciesgeocodeR:::.ValidCoordinates(x[,2:3]))
system.time(speciesgeocodeR:::.ValidCoordinates(x))
system.time(.ValidCoordinates2(x[,2:3]))
system.time(.ValidCoordinates2(x))
x2 <- x
names(x2) <- c("longitude", "latitude")
system.time(speciesgeocodeR:::.ValidCoordinates(x2))
system.time(.ValidCoordinates2(x))
x <- data.frame(decimallongitude = runif(1000000, min = -180, max = 180),
decimallatitude = runif(1000000, min = -90, max = 90))
x2 <- x
names(x2) <- c("longitude", "latitude")
system.time(speciesgeocodeR:::.ValidCoordinates(x2))
system.time(.ValidCoordinates2(x))
.ValidCoordinates2 <- function(x) {
out <- list(is.na(x$decimallongitude),
is.na(x$decimallatitude),
suppressWarnings(is.na(as.numeric(as.character(x$decimallongitude)))),
suppressWarnings(is.na(as.numeric(as.character(x$decimallatitude)))),
suppressWarnings(as.numeric(as.character(x$decimallongitude))) < -180,
suppressWarnings(as.numeric(as.character(x$decimallongitude))) > 180,
suppressWarnings(as.numeric(as.character(x$decimallatitude))) < -90,
suppressWarnings(as.numeric(as.character(x$decimallatitude))) >   90
)
out <- Reduce("&", out)
}
.ValidCoordinates2 <- function(x) {
out <- list(is.na(x$decimallongitude),
is.na(x$decimallatitude),
suppressWarnings(is.na(as.numeric(as.character(x$decimallongitude)))),
suppressWarnings(is.na(as.numeric(as.character(x$decimallatitude)))),
suppressWarnings(as.numeric(as.character(x$decimallongitude))) < -180,
suppressWarnings(as.numeric(as.character(x$decimallongitude))) > 180,
suppressWarnings(as.numeric(as.character(x$decimallatitude))) < -90,
suppressWarnings(as.numeric(as.character(x$decimallatitude))) >   90
)
out <- Reduce("&", out)
return(out)
}
system.time(.ValidCoordinates2(x))
.ValidCoordinates2 <- function(x) {
out <- list(is.na(x$decimallongitude),
is.na(x$decimallatitude),
suppressWarnings(is.na(as.numeric(as.character(x$decimallongitude)))),
suppressWarnings(is.na(as.numeric(as.character(x$decimallatitude)))),
suppressWarnings(as.numeric(as.character(x$decimallongitude))) < -180,
suppressWarnings(as.numeric(as.character(x$decimallongitude))) > 180,
suppressWarnings(as.numeric(as.character(x$decimallatitude))) < -90,
suppressWarnings(as.numeric(as.character(x$decimallatitude))) >   90
)
out <- !Reduce("|", out)
return(out)
}
system.time(.ValidCoordinates2(x))
tt1 <- speciesgeocodeR:::.ValidCoordinates(x2)
tt2 <- .ValidCoordinates2(x)
head(tt1)
head(tt2)
pts <- spatialPoints(x)
pts <- sp::spatialPoints(x)
pts <- sp::SpatialPoints(x)
out <- crop(pts, extent(-180,180, -90, 90))
heaed(out)
out
x <- cbind(c(NA, -1000, "XXX", ""), c(0,0,0,0))
x
pts <- sp::SpatialPoints(x)
gBuffer(SpatialPoints(c(0,0)))
sp::gBuffer(sp::SpatialPoints(c(0,0)))
?gBuffer
rgeos::gBuffer(sp::SpatialPoints(c(0,0)))
rgeos::gBuffer(sp::SpatialPoints(cbind(0,0)))
?gBuffer
rgeos::gBuffer(sp::SpatialPoints(cbind(0,0)), width = pointlim)
pointlim = 0.5
rgeos::gBuffer(sp::SpatialPoints(cbind(0,0)), width = pointlim)
zer <- over(test, pts)
test <- rgeos::gBuffer(sp::SpatialPoints(cbind(0,0)), width = pointlim)
zer <- over(test, pts)
zer
x[170856]
x[170856,]
x
pts
coordinates(pts[170856,])
plot(test)
plot(pts, add = T)
?over
zer <- over(x = test, y = pts)
zer
zer <- over(y = test, x = pts)
zer
zer <- !is.na(over(y = test, x = pts))
zer
coordinates(pts)[zer,]
plot(test)
plot(coordinates(pts)[zer,], add = T)
dev.off()
plot.new()
plot(test)
points(coordinates(pts)[zer,])
points(pts, col = "red"
)
which(!is.na(over(y = test, x = pts)))
.ZeroCoordinates2 <- function(x, pointlim = 0.5) {
pts <- SpatialPoints(x)
out <- rep(T, nrow(x))
# plain zero in coordinates
out[which(x$decimallongitude == 0 | x$decimallatitude == 0)] <- FALSE
# radius around point 0/0
test <- rgeos::gBuffer(sp::SpatialPoints(cbind(0,0)), width = pointlim)
out[which(!is.na(over(y = test, x = pts)))] <- FALSE
# lat == long
out[which(x$decimallongitude == x$decimallatitude)] <- FALSE
return(out)
}
system.time(speciesgeocodeR:::.ZeroCoordinates(x2))
system.time(.ZeroCoordinates(x))
head(x)
x <- data.frame(decimallongitude = runif(1000000, min = -180, max = 180),
decimallatitude = runif(1000000, min = -90, max = 90))
x2 <- x
names(x2) <- c("longitude", "latitude")
system.time(speciesgeocodeR:::.ZeroCoordinates(x2))
system.time(.ZeroCoordinates2(x))
referencedat <- speciesgeocodeR::capitals
referencedat <- referencedat[1,]
referencedat
dat <- sp::SpatialPoints(x[, c("decimallongitude", "decimallatitude")])
dat <- sp::SpatialPoints(x)
if (is.null(referencedat)) {
referencedat <- speciesgeocodeR::capitals
}
limits <- raster::extent(dat) + buffer
# subset of testdatset according to limits
referencedat <- raster::crop(SpatialPoints(referencedat[,c("longitude", "latitude")]), limits)
buffer = 1
limits <- raster::extent(dat) + buffer
referencedat <- raster::crop(SpatialPoints(referencedat[,c("longitude", "latitude")]), limits)
dat <- sp::SpatialPoints(x)
referencedat <- speciesgeocodeR::capitals
referencedat <- referencedat[1,]
referencedat <- raster::crop(SpatialPoints(referencedat[,c("longitude", "latitude")]), limits)
referencedat <- rgeos::gBuffer(referencedat, width = testdist, byid = T)
test <- sp::over(referencedat, dat)
test
plot(referencedat)
points(dat)
plot(dat)
testdist = 1
referencedat <- speciesgeocodeR::capitals
referencedat[1:2,]
referencedat <- referencedat[1:2,]
referencedat <- raster::crop(SpatialPoints(referencedat[,c("longitude", "latitude")]), limits)
referencedat <- rgeos::gBuffer(referencedat, width = testdist, byid = T)
plot(referencedat)
points(dat)
test <- sp::over(referencedat, dat)
test
test <- sp::over(x = dat, y = referencedat)
test
test <- !is.na(sp::over(x = dat, y = referencedat))
x[test,]
plot(referencedat)
points(x[test,])
referencedat <- speciesgeocodeR::capitals
referencedat <- referencedat[1,]
referencedat <- raster::crop(SpatialPoints(referencedat[,c("longitude", "latitude")]), limits)
referencedat <- rgeos::gBuffer(referencedat, width = testdist, byid = T)
test <- !is.na(sp::over(x = dat, y = referencedat))
plot(referencedat)
points(dat)
sum(test)
points(x[test,], col = "red")
library(ggplot2)
citation(ggplot2)
citation("ggplot2")
grbio <- read.csv("C:/Users/alexander.zizka/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/projects/3_speciesgeocoder/speciesgeocodeR/grbio_institutions.csv.csv")
grbio <- read.csv("C:/Users/alexander.zizka/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/projects/3_speciesgeocoder/speciesgeocodeR/grbio_institutions.csv")
head(grbio)
str(grbio)
herb <- read.csv("C:/Users/alexander.zizka/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/projects/3_speciesgeocoder/speciesgeocodeR/index_herbariorum.csv")
head(herb)
str(herb)
haerb$Address
herb$Address
herb <- herb[herb$Address != ""]
herb <- herb[herb$Address != "",]
head(herb)
dim(herb)
head(herb, 10)
herb <- read.csv("C:/Users/alexander.zizka/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/projects/3_speciesgeocoder/speciesgeocodeR/index_herbariorum.csv", fileEncoding = "UTF-8")
herb <- herb[herb$Address != "",]
head(herb)
herb <- read.csv("C:/Users/alexander.zizka/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/projects/3_speciesgeocoder/speciesgeocodeR/index_herbariorum.csv")
head(herb)
head(grbio)
grbio <- grbio[,c("Institution.Name", "Mailing.Address.1", "Mailing.Address.2", "Mailing.Address.3", "City.Town.1")]
haed(grbio)
head(grbio, 20)
dim(grbio)
ser.grbio <- paste(grbio["Institution.Name"], grbio["City.Town.1"], sep = ",")
ser.grbio
ser.grbio <- paste(as.character(grbio["Institution.Name"]), as.character(grbio["City.Town.1"], sep = ","))
ser.grbio
as.character(grbio["Institution.Name"])
str(grbio)
as.character(grbio[,1])
ser.grbio <- paste(as.character(grbio[,1]), as.character(grbio[,5], sep = ","))
head(ser.grbio)
ser.grbio <- paste(as.character(grbio[,1]), as.character(grbio[,5], sep = ", "))
head(ser.grbio)
ser.grbio <- paste(as.character(grbio[,1]), as.character(grbio[,5], sep = "\, "))
ser.grbio <- paste(as.character(grbio[,1]), as.character(grbio[,5]), sep = ", ")
head(ser.grbio)
ser.grbio <- data.frame(paste(as.character(grbio[,1]), as.character(grbio[,5]), sep = ", "))
head(Se.grbio)
head(ser.grbio)
out.grbio.temp <- apply(ser.grbio[1:2500,], 1, "coder")
library(ggmap)
#function definition
coder <- function(x){
resu <- ggmap::geocode(as.character(x[1]), output = "all" , source = "google")
if(resu$status == "OK"){
out <- data.frame(resu$results[[1]]$geometry$location$lng,
resu$results[[1]]$geometry$location$lat,
resu$results[[1]]$formatted_address)
names(out) <- c("long", "lat", "address")
}else{
out <- c(NA,NA,NA)
names(out) <- c("long", "lat", "address")
}
return(out)
}
out.grbio.temp <- apply(ser.grbio[1:2500,], 1, "coder")
x <-ser.grbio
x <-ser.grbio[1,]
x
as.character(x[1])
resu <- ggmap::geocode(as.character(x[1]), output = "all" , source = "google")
resu$status
if(resu$status == "OK"){
out <- data.frame(resu$results[[1]]$geometry$location$lng,
resu$results[[1]]$geometry$location$lat,
resu$results[[1]]$formatted_address)
names(out) <- c("long", "lat", "address")
}
out.grbio.temp <- apply(ser.grbio[1:2500], 1, "coder")
ser.grbio[1:2500,]
out.grbio.temp <- apply(as.character(ser.grbio[1:2500,]), 1, "coder")
as.character(ser.grbio[1:2500,])
data.frame(as.character(ser.grbio[1:2500,]))
out.grbio.temp <- apply(data.frame(as.character(ser.grbio[1:2500,])), 1, "coder")
limits = c(-180, 180, -90, 90)
limits <- extent(limits)
xmin <- limits[1]
xmax <- limits[2]
ymin <- limits[3]
ymax <- limits[4]
if (xmin * xmax > 0) {
cols <- abs(abs(slot(limits, "xmax")) - abs(slot(limits, "xmin")))
} else {
cols <- abs(abs(slot(limits, "xmax")) + abs(slot(limits, "xmin")))
}
if (ymin * ymax > 0) {
rows <- abs(abs(slot(limits, "ymax")) - abs(slot(limits, "ymin")))
} else {
rows <- abs(abs(slot(limits, "ymax")) + abs(slot(limits, "ymin")))
}
reso <- 60/reso
rasto <- raster(limits, ncol = cols* reso, nrow = rows * reso, vals = 1)
library(speciesgeocodeR)
x<- read.csv("C:/Users/alexander.zizka/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/projects/16_spatial_bias_package/sampBias20/sampbias/example_data/mammals_borneo.csv", sep = "\t")
x <- x[,c("scientificname", "decimallongitude", "decimallatitude")]
haed(out.grbio.temp,20)
head(out.grbio.temp,20)
library(speciesgeocodeR)
x<- read.csv("C:/Users/alexander.zizka/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/projects/16_spatial_bias_package/sampBias20/sampbias/example_data/mammals_borneo.csv", sep = "\t")
x <- x[,c("scientificname", "decimallongitude", "decimallatitude")]
wwf <- WwfLoad("")
library(shapefiles)
library(rgeos)
library(sp)
dat <- speciesgeocodeR::landmass
proj4string(dat) <-  CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
dat <- spTransform(dat, "+proj=eck4 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
landmass_simple <- gBuffer(dat, width = 50000)
landmass_simple <- spTransform(landmass_simple, "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
landmass_buffered <- gSimplify(landmass_simple, tol = 0.1)
save( file = "landmass_buffered.Rdata", landmass_buffered)
x
library(sp)
x <-"ttt"
is.SpatialPolygons(x)
is.spatialPolygons(x)
library(maptools)
is.SpatialPolygons(x)
??is.SpatialPolygons
methods(SpatialPOlygons)
methods(SpatialPolygons)
is(x)
tt <- readShapeSpatial("C:/Users/alexander.zizka/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/projects/3_speciesgeocoder/testspgc/burkina/input/bf_departements.shp")
is(tt)
is.SpatialPolygons
?is.try-error
is.try-error(x)
library(speciesgeocodeR)
?aes_string
?distHaversine
library(speciesgeocodeR)
library(speciesgeocodeR)
library(speciesgeocodeR)
library(speciesgeocodeR)
data(lemurs)
lemurs
head(lemurs)
head(Dat)
head(dat)
library(speciesgeocodeR)
?treedata
linrary(geiger)
library(geiger)
?treedata
?node.age
library(ape)
?node.age
??node.age
??extract.clade
??node.age
??write.tree
??add.scale.bar
?Ntip
??tips
?tips
library(speciesgeocodeR)
library(devtools)
install_github('JanLauGe/BioGeoBias')
library(BioGeoBias)
?BioGeoBias
install_github('JanLauGe/BioGeoBias')
library(BioGeoBias)
?BioGeoBias
library(devtools)
install_github('JanLauGe/BioGeoBias')
library(BioGeoBias)
library(devtools)
install_github('JanLauGe/BioGeoBias')
library(BioGeoBias)
?BioGeoBias
install.packages("devtools")
library(devtools)
install_github('JanLauGe/BioGeoBias')
library(BioGeoBias)
?BioGeoBias
install.packages("rgbif")
install_github('JanLauGe/BioGeoBias')
library(BioGeoBias)
?BioGeoBias
?bias_correction
ls(package:BioGeoBias)
?create_bias_grid
?call_map_api
out <- call_map_api("Adansonia digitata")
create_bias_grid
?create_bias_grid
create_bias_grid("Adansonia digitata")
bias_correction
bias_correction("Adansonia digitata")
bias_correction("Adansonia digitata", target_rank = "species")
bias_correction("Adansonia digitata", target_rank = "genus")
test1 <- create_bias_grid("Adansonia digitata") #this also doesn't work, isn't it supposed to take a taxon name
install.packages("geosphere")
library(speciesgeocodeR)
library(speciesgeocodeR)
library(speciesgeocodeR)
library(speciesgeocodeR)
is.data.frame
?inherits
inherits("XXX", "character")
inherits("XXX", "data.frame")
library(speciesgeocodeR)
library(speciesgeocodeR)
install.packages("vegan")
library(speciesgeocodeR)
library(speciesgeocodeR)
library(speciesgeocodeR)
library(speciesgeocodeR)
data(lemurs)
lemurs
headlemurs
names(lemurs) <- c("species", "decimallongitude", "decimallatitude")
save(lemurs, file = "lemurs.rda")
data(lemurs_test)
names(lemurs_test) <- c("species", "decimallongitude", "decimallatitude")
save(lemurs_test, file = "lemurs_test.rda")
data(mdg_poly)
is(mdg_poly)
head(mdg_poly)
names(mdg_poly) <- c("species", "decimallongitude", "decimallatitude")
save(mdg_poly, file = "mdg_poly.rda")
library(speciesgeocodeR)
head(lemurs_test)
names(lemurs_test)[4] <- "country"
names(lemurs_test)
save(lemurs_test, file = "lemurs_test.rda")
mode <- c("A", "B")
any(mode == "percent")
library(raster)
?reso
?resolution
?reso
limits = c(-180, 180, -90, 90)
e <- extent(limits)
ras <- raster(e, ncols = cols * reso, nrows = rows * reso, crs = CRS("+proj=longlat +datum=WGS84"))
ras <- raster(e)
e
?switch
install_github("azizka/speciesgeocodeR/speciesgeocodeR")
require(devtools)
install_github("azizka/speciesgeocodeR/speciesgeocodeR")
require(rgeos)
install.packages("spocc")
install.packages("spocc")
install_github("azizka/speciesgeocodeR/speciesgeocodeR")
