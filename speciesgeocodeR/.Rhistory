sortout <- filt[filt <= 2]
if (length(sortout) > 0) {
warning("the following species have less than 3 occurrence, values set to NA:",
paste("\n", names(sortout)))
}
inp <- split(dat.filt, f = dat.filt$scientificName)
if (eoo.value[1] == "area") {
out <- lapply(inp, function(x) .eoo(x, clipp = T))
out <- data.frame(do.call("rbind", out))
names(out) <- "EOO"
eoo.out <- rbind(out, data.frame(row.names = rownames(sortout),
EOO = rep("NA",length(sortout))))
}
if (eoo.value[1] == "shape") {
out <- lapply(inp, function(x) .ConvHull(x))
if (eoo.terrestrial) {
if (!requireNamespace("geosphere", quietly = TRUE)) {
stop("rgeos needed for eoo.terrestrial = T. Please install the package.",
call. = FALSE)
}
if (verbose == T) {
cat("Clipping shapes to landmasses.")
}
eoo.out <- lapply(out, function(x) rgeos::gIntersection(x, speciesgeocodeR::landmass))
}
}
}
# AOO calcualtion
if ("AOO" %in% mode) {
if (isnull(aoo.xmin)) {
aoo.xmin <- min(x$decimalLongitude)
warnings("aoo.xmin not specified, guessed from data")
}
if (isnull(aoo.xmax)) {
aoo.xmin <- max(x$decimalLongitude)
warnings("aoo.xmax not specified, guessed from data")
}
if (isnull(aoo.xmin)) {
aoo.xmin <- min(x$decimalLatitude)
warnings("aoo.ymin not specified, guessed from data")
}
if (isnull(aoo.xmax)) {
aoo.xmin <- max(x$decimalLatitude)
warnings("aoo.ymax not specified, guessed from data")
}
wgs84 <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
caep <- CRS("+proj=cea +lon_0=0 +lat_ts=30 +x_0=0 +y_0=0 +a=6371228 +b=6371228 +units=m +no_defs")
aoo.out <- list()
for (i in 1:reps) {
tt <- SpatialPoints(matrix(c(aoo.xmin, aoo.xmax, aoo.ymin, aoo.ymax), ncol = 2),
proj4string = wgs84)
tt <- spTransform(tt, caep)
tt <- SpatialPoints(coordinates(tt) + ((2000/reps) * (i - 1)))
pp <- raster(tt, res = aoo.gridsize * 1000)
occs <- split(x, f = x$scientificName)
aoo <- lapply(occs, function(k) {
pts <- SpatialPoints(k[, 2:3], proj4string = wgs84)
pts <- spTransform(pts, caep)
uu <- rasterize(pts, pp)
uu[uu >= 1] <- 1
dum <- sum(getValues(uu), na.rm = T) * aoo.gridsize
return(dum)
})
aoo.out[[i]] <- do.call("rbind.data.frame", aoo)
names(aoo.out[[i]])[1] <- paste("rep", i, sep = "_")
}
aoo.out <- do.call("cbind.data.frame", aoo.out)
aoo.out <- data.frame(rowMeans(aoo.out2))
}
if ("EOO" %in% mode & "AOO" %in% mode) {
out <- merge(eoo.out, aoo.out)
} else if ("EOO" %in% mode) {
out <- eoo.out
} else if ("AOO" %in% mode) {
out <- aoo.out
}
return(out)
}
results <- CalcRange(dat[,1:3], mode = "EOO", eoo.value = "area")
x<- dat
if (class(x) == "spgeoOUT") {
dat <- data.frame(identifier = x$identifier_in, x$species_coordinates_in)
} else {
dat <- x[, 1:3]
names(dat) <- c("scientificName", "DecimalLongitude", "DecimalLatitude")
}
if (!is.numeric(dat[, 2]) | !is.numeric(dat[, 3])) {
stop("wrong input format, x must be a data.frame with three columns: scientificName, decimalLongitude, decimalLatitude.\n")
}
if (max(dat[, 2]) > 180 | min(dat[, 2]) < -180 | max(dat[, 3]) > 90 | min(dat[, 3]) <
-90) {
stop("invallid input coordinates. Check for column order and valid coordinates.")
}
if ("AOO" %in% mode & "EOO" %in% mode & eoo.value[1] == "shape") {
stop("combined AOO and EOO analyses are only enabled with eoo.value = 'area'")
}
mode
index
index <- "EOO"
if (class(x) == "spgeoOUT") {
dat <- data.frame(identifier = x$identifier_in, x$species_coordinates_in)
} else {
dat <- x[, 1:3]
names(dat) <- c("scientificName", "DecimalLongitude", "DecimalLatitude")
}
if (!is.numeric(dat[, 2]) | !is.numeric(dat[, 3])) {
stop("wrong input format, x must be a data.frame with three columns: scientificName, decimalLongitude, decimalLatitude.\n")
}
if (max(dat[, 2]) > 180 | min(dat[, 2]) < -180 | max(dat[, 3]) > 90 | min(dat[, 3]) <
-90) {
stop("invallid input coordinates. Check for column order and valid coordinates.")
}
if ("AOO" %in% index & "EOO" %in% index & eoo.value[1] == "shape") {
stop("combined AOO and EOO analyses are only enabled with eoo.value = 'area'")
}
eoo.value <- "area"
if (class(x) == "spgeoOUT") {
dat <- data.frame(identifier = x$identifier_in, x$species_coordinates_in)
} else {
dat <- x[, 1:3]
names(dat) <- c("scientificName", "DecimalLongitude", "DecimalLatitude")
}
if (!is.numeric(dat[, 2]) | !is.numeric(dat[, 3])) {
stop("wrong input format, x must be a data.frame with three columns: scientificName, decimalLongitude, decimalLatitude.\n")
}
if (max(dat[, 2]) > 180 | min(dat[, 2]) < -180 | max(dat[, 3]) > 90 | min(dat[, 3]) <
-90) {
stop("invallid input coordinates. Check for column order and valid coordinates.")
}
if ("AOO" %in% index & "EOO" %in% index & eoo.value[1] == "shape") {
stop("combined AOO and EOO analyses are only enabled with eoo.value = 'area'")
}
# only use species with more than 2 occurrences for EOO
filt <- tapply(dat$decimalLongitude, dat$scientificName, length)
filterd <- filt[filt > 2]
dat$scientificName <- as.character(dat$scientificName)
dat.filt <- subset(dat, dat$scientificName %in% as.character(names(filterd)))
sortout <- filt[filt <= 2]
if (length(sortout) > 0) {
warning("the following species have less than 3 occurrence, values set to NA:",
paste("\n", names(sortout)))
}
inp <- split(dat.filt, f = dat.filt$scientificName)
dat
head(dat)
dat <- unique(dat)
dat
dim(dat)
dim(dat)
str(dat)
filt <- table(dat$decimalLongitude, dat$scientificName, length)
filterd <- filt[filt > 2]
dat$scientificName <- as.character(dat$scientificName)
dat.filt <- subset(dat, dat$scientificName %in% as.character(names(filterd)))
sortout <- filt[filt <= 2]
if (length(sortout) > 0) {
warning("the following species have less than 3 occurrence, values set to NA:",
paste("\n", names(sortout)))
}
inp <- split(dat.filt, f = dat.filt$scientificName)
filt <- table(dat$scientificName)
filt
filterd <- filt[filt > 4]
filtered
filterd
filt <- table(dat$scientificName)
filt <- filt[filt > 2]
dat.filt <- subset(dat, dat$scientificName %in% as.character(names(filt)))
sortout <- filt[filt <= 2]
sortout
if (length(sortout) > 0) {
warning("the following species have less than 3 occurrence, values set to NA:",
paste("\n", names(sortout)))
}
inp <- split(dat.filt, f = dat.filt$scientificName)
if (eoo.value[1] == "area") {
out <- lapply(inp, function(x) .eoo(x, clipp = T))
out <- data.frame(do.call("rbind", out))
names(out) <- "EOO"
eoo.out <- rbind(out, data.frame(row.names = rownames(sortout),
EOO = rep("NA",length(sortout))))
}
results <- CalcRange(dat[,1:3], mode = "EOO", eoo.value = "area")
library(speciesgeocodeR)
library(speciesgeocodeR)
results <- CalcRange(dat[,1:3], mode = "EOO", eoo.value = "area")
dat <- read.table("C:\\Users\\xzizal\\Dropbox (Antonelli Lab)\\Arbeit\\Gothenburg\\Projects\\9_Burkina_distribution_atlas\\data\\data_BFA_atlas_marco20140701.txt",
sep = "\t", header = T)
dat$NameAcc <- as.character(dat$NameAcc)
dat <- head(dat,1000)
results <- CalcRange(dat[,1:3], mode = "EOO", eoo.value = "area")
library(speciesgeocodeR)
results <- CalcRange(dat[,1:3], mode = "EOO", eoo.value = "area")
results <- CalcRange(dat[,1:3], index = "EOO", eoo.value = "area")
dat
x <- dat[,1:3]
index = "EOO"
eoo.valeu = "area"
#prepare input data
if (class(x) == "spgeoOUT") {
dat <- data.frame(identifier = x$identifier_in, x$species_coordinates_in)
names(dat) <- c("scientificName", "DecimalLongitude", "DecimalLatitude")
dat$scientificName <- as.character(dat$scientificName)
} else {
dat <- x[, 1:3]
names(dat) <- c("scientificName", "DecimalLongitude", "DecimalLatitude")
dat$scientificName <- as.character(dat$scientificName)
}
#check input data for validity
if (!is.numeric(dat[, 2]) | !is.numeric(dat[, 3])) {
stop("wrong input format, x must be a data.frame with three columns: scientificName, decimalLongitude, decimalLatitude.\n")
}
if (max(dat[, 2]) > 180 | min(dat[, 2]) < -180 | max(dat[, 3]) > 90 | min(dat[, 3]) <
-90) {
stop("invallid input coordinates. Check for column order and valid coordinates.")
}
if ("AOO" %in% index & "EOO" %in% index & eoo.value[1] == "shape") {
stop("combined AOO and EOO analyses are only enabled with eoo.value = 'area'")
}
# EOO calculation
if ("EOO" %in% index) {
#filter out duplicate records, this is necessary to have three unique points
dat <- unique(dat)
# only use species with more than 2 occurrences for EOO
filt <- table(dat$scientificName)
filt <- filt[filt > 2]
dat.filt <- subset(dat, dat$scientificName %in% as.character(names(filt)))
sortout <- filt[filt <= 2]
if (length(sortout) > 0) {
warning("the following species have less than 3 occurrence, values set to NA:",
paste("\n", names(sortout)))
}
#prepare input data
if (class(x) == "spgeoOUT") {
dat <- data.frame(identifier = x$identifier_in, x$species_coordinates_in)
names(dat) <- c("scientificName", "DecimalLongitude", "DecimalLatitude")
dat$scientificName <- as.character(dat$scientificName)
} else {
dat <- x[, 1:3]
names(dat) <- c("scientificName", "DecimalLongitude", "DecimalLatitude")
dat$scientificName <- as.character(dat$scientificName)
}
#check input data for validity
if (!is.numeric(dat[, 2]) | !is.numeric(dat[, 3])) {
stop("wrong input format, x must be a data.frame with three columns: scientificName, decimalLongitude, decimalLatitude.\n")
}
if (max(dat[, 2]) > 180 | min(dat[, 2]) < -180 | max(dat[, 3]) > 90 | min(dat[, 3]) <
-90) {
stop("invallid input coordinates. Check for column order and valid coordinates.")
}
if ("AOO" %in% index & "EOO" %in% index & eoo.value[1] == "shape") {
stop("combined AOO and EOO analyses are only enabled with eoo.value = 'area'")
}
eoo.value = "area"
dat <- unique(dat)
# only use species with more than 2 occurrences for EOO
filt <- table(dat$scientificName)
filt <- filt[filt > 2]
dat.filt <- subset(dat, dat$scientificName %in% as.character(names(filt)))
sortout <- filt[filt <= 2]
if (length(sortout) > 0) {
warning("the following species have less than 3 occurrence, values set to NA:",
paste("\n", names(sortout)))
}
inp <- split(dat.filt, f = dat.filt$scientificName)
out <- lapply(inp, function(x) .eoo(x, clipp = T))
.eoo <- function(x, clipp) {
if (!requireNamespace("geosphere", quietly = TRUE)) {
stop("geosphere needed for this function to work. Please install it.",
call. = FALSE)
}
conv.hull <- chull(x$XCOOR, x$YCOOR)
dat2 <- x[conv.hull, ]
dat2 <- rbind(dat2[, c(2, 3)], dat2[1, c(2, 3)])
poly <- SpatialPolygons(list(Polygons(list(Polygon(dat2)), ID = paste(x[1, 1], "_convhull", sep = ""))), proj4string = CRS("+proj=longlat +datum=WGS84"))
if(clipp){
poly <- rgeos::gIntersection(poly, speciesgeocodeR::landmass)
}
area <- round(geosphere::areaPolygon(poly)/(1000 * 1000), 0)
return(area)
}
out <- lapply(inp, function(x) .eoo(x))
library(maptools)
out <- data.frame(do.call("rbind", out))
out <- lapply(inp, function(x) .eoo(x))
str(inp)
inp
.eoo <- function(x, clipp) {
if (!requireNamespace("geosphere", quietly = TRUE)) {
stop("geosphere needed for this function to work. Please install it.",
call. = FALSE)
}
conv.hull <- chull(x$decimalLongitude, x$decimalLatitude)
dat2 <- x[conv.hull, ]
dat2 <- rbind(dat2[, c(2, 3)], dat2[1, c(2, 3)])
poly <- SpatialPolygons(list(Polygons(list(Polygon(dat2)), ID = paste(x[1, 1], "_convhull", sep = ""))), proj4string = CRS("+proj=longlat +datum=WGS84"))
if(clipp){
poly <- rgeos::gIntersection(poly, speciesgeocodeR::landmass)
}
area <- round(geosphere::areaPolygon(poly)/(1000 * 1000), 0)
return(area)
}
out <- lapply(inp, function(x) .eoo(x))
head(inp)
library(speciesgeocodeR)
dat <- read.table("C:\\Users\\xzizal\\Dropbox (Antonelli Lab)\\Arbeit\\Gothenburg\\Projects\\9_Burkina_distribution_atlas\\data\\data_BFA_atlas_marco20140701.txt",
sep = "\t", header = T)
dat$NameAcc <- as.character(dat$NameAcc)
dat <- head(dat,1000)
results <- CalcRange(dat[,1:3], index = "EOO", eoo.value = "area")
library(speciesgeocodeR)
dat <- read.table("C:\\Users\\xzizal\\Dropbox (Antonelli Lab)\\Arbeit\\Gothenburg\\Projects\\9_Burkina_distribution_atlas\\data\\data_BFA_atlas_marco20140701.txt",
sep = "\t", header = T)
dat$NameAcc <- as.character(dat$NameAcc)
dat <- head(dat,1000)
results <- CalcRange(dat[,1:3], index = "EOO", eoo.value = "area")
warnings()
results
results <- CalcRange(dat[,1:3], index = "AOO", eoo.value = "area")
?is.null
?is.spgeoOUT
is.spgeoOUT(dat)
isis(dat)
is(dat)
is(dat) =="list"
is.list(dat)
is.list
?is
library(speciesgeocodeR)
library(speciesgeocodeR)
results <- CalcRange(dat[,1:3], index = "AOO", eoo.value = "area")
library(speciesgeocodeR)
results <- CalcRange(dat[,1:3], index = "AOO", eoo.value = "area", reps = 2)
results <- CalcRange(dat[,1:3], index = "AOO", eoo.value = "area", aoo.reps = 2)
library(speciesgeocodeR)
results <- CalcRange(dat[,1:3], index = "AOO", eoo.value = "area", aoo.reps = 2)
library(speciesgeocodeR)
results <- CalcRange(dat[,1:3], index = "AOO", eoo.value = "area", aoo.reps = 2)
library(speciesgeocodeR)
results <- CalcRange(dat[,1:3], index = "AOO", eoo.value = "area", aoo.reps = 2)
library(speciesgeocodeR)
results <- CalcRange(dat[,1:3], index = "AOO", eoo.value = "area", aoo.reps = 2)
results
results <- CalcRange(dat[,1:3], index = c("AOO", "EOO"), eoo.value = "area", aoo.reps = 2)
results
library(speciesgeocodeR)
results <- CalcRange(dat[,1:3], index = c("AOO", "EOO"), eoo.value = "area", aoo.reps = 2)
results
?merge
library(speciesgeocodeR)
results <- CalcRange(dat[,1:3], index = c("AOO", "EOO"), eoo.value = "area", aoo.reps = 2)
results
x < -results
x <-results
x
library(speciesgeocodeR)
results <- CalcRange(dat[,1:3], index = c("AOO", "EOO"), eoo.value = "area", aoo.reps = 2)
results
library(formatR)
tidy_source(width.cutoff = 75)
tidy_source(width.cutoff = 75)
IUCNest <- function(x, value = c("all", "AOO", "EOO", "IUCN50", "IUCN100", "IUCN500"),
NT.thresh = c(30000, 3000), VU.thresh = c(20000, 2000),
EN.thresh = c(5000,500), CR.thresh = c(100, 10)) {
if (class(x) == "range.sizes") {
AOO <- rep("DD", nrows(x))
EOO <- rep("DD", nrows(x))
both <- rep("DD", nrows(x))
IUCN50 <- rep(0, nrow(x))
IUCN100 <- rep(0, nrow(x))
IUCN500 <- rep(0, nrow(x))
AOO[x$aoo > 3000] <- "LC"
AOO[x$aoo < 3000] <- "NT"
AOO[x$aoo < 2000] <- "VU"
AOO[x$aoo < 500] <- "EN"
AOO[x$aoo < 10] <- "CR"
EOO[x$eoo > 30000] <- "LC"
EOO[x$eoo < 30000] <- "NT"
EOO[x$eoo < 20000] <- "VU"
EOO[x$eoo < 5000] <- "EN"
EOO[x$eoo < 100] <- "CR"
both[x$eoo > 30000 | x$aoo > 3000] <- "LC"
both[x$eoo < 30000 & x$aoo < 3000] <- "NT"
both[x$eoo < 20000 & x$aoo < 2000] <- "VU"
both[x$eoo < 5000 & x$aoo < 500] <- "EN"
both[x$eoo < 100 & x$aoo < 10] <- "CR"
IUCN50[out == "LC"] <- 5e-05
IUCN50[out == "NT"] <- 0.004
IUCN50[out == "VU"] <- 0.05
IUCN50[out == "EN"] <- 0.42
IUCN50[out == "CR"] <- 0.97
IUCN100[out == "LC"] <- 1e-04
IUCN100[out == "NT"] <- 0.01
IUCN100[out == "VU"] <- 0.1
IUCN100[out == "EN"] <- 0.667
IUCN100[out == "CR"] <- 0.999
IUCN500[out == "LC"] <- 5e-04
IUCN500[out == "NT"] <- 0.02
IUCN500[out == "VU"] <- 0.39
IUCN500[out == "EN"] <- 0.996
IUCN500[out == "CR"] <- 1
out <- data.frame(AOO, EOO, both, IUCN50, IUCN100, IUCN500)
if ("all" %in% value) {
return(out)
} else {
if (!"AOO" %in% value) {
out <- out[, -1]
}
if (!"EOO" %in% value) {
out <- out[, -2]
}
if (!"both" %in% value) {
out <- out[, -3]
}
if (!"IUCN50" %in% value) {
out <- out[, -4]
}
if (!"IUCN100" %in% value) {
out <- out[, -5]
}
if (!"IUCN500" %in% value) {
out <- out[, -6]
}
}
} else {
stop("only defined for class 'range.sizes'")
}
}
IUCNest(results)
IUCNest <- function(x, value = c("all", "AOO", "EOO", "IUCN50", "IUCN100", "IUCN500"),
NT.thresh = c(30000, 3000), VU.thresh = c(20000, 2000),
EN.thresh = c(5000,500), CR.thresh = c(100, 10)) {
if (is(x) == "range.sizes") {
AOO <- rep("DD", nrows(x))
EOO <- rep("DD", nrows(x))
both <- rep("DD", nrows(x))
IUCN50 <- rep(0, nrow(x))
IUCN100 <- rep(0, nrow(x))
IUCN500 <- rep(0, nrow(x))
AOO[x$aoo > 3000] <- "LC"
AOO[x$aoo < 3000] <- "NT"
AOO[x$aoo < 2000] <- "VU"
AOO[x$aoo < 500] <- "EN"
AOO[x$aoo < 10] <- "CR"
EOO[x$eoo > 30000] <- "LC"
EOO[x$eoo < 30000] <- "NT"
EOO[x$eoo < 20000] <- "VU"
EOO[x$eoo < 5000] <- "EN"
EOO[x$eoo < 100] <- "CR"
both[x$eoo > 30000 | x$aoo > 3000] <- "LC"
both[x$eoo < 30000 & x$aoo < 3000] <- "NT"
both[x$eoo < 20000 & x$aoo < 2000] <- "VU"
both[x$eoo < 5000 & x$aoo < 500] <- "EN"
both[x$eoo < 100 & x$aoo < 10] <- "CR"
IUCN50[out == "LC"] <- 5e-05
IUCN50[out == "NT"] <- 0.004
IUCN50[out == "VU"] <- 0.05
IUCN50[out == "EN"] <- 0.42
IUCN50[out == "CR"] <- 0.97
IUCN100[out == "LC"] <- 1e-04
IUCN100[out == "NT"] <- 0.01
IUCN100[out == "VU"] <- 0.1
IUCN100[out == "EN"] <- 0.667
IUCN100[out == "CR"] <- 0.999
IUCN500[out == "LC"] <- 5e-04
IUCN500[out == "NT"] <- 0.02
IUCN500[out == "VU"] <- 0.39
IUCN500[out == "EN"] <- 0.996
IUCN500[out == "CR"] <- 1
out <- data.frame(AOO, EOO, both, IUCN50, IUCN100, IUCN500)
if ("all" %in% value) {
return(out)
} else {
if (!"AOO" %in% value) {
out <- out[, -1]
}
if (!"EOO" %in% value) {
out <- out[, -2]
}
if (!"both" %in% value) {
out <- out[, -3]
}
if (!"IUCN50" %in% value) {
out <- out[, -4]
}
if (!"IUCN100" %in% value) {
out <- out[, -5]
}
if (!"IUCN500" %in% value) {
out <- out[, -6]
}
}
} else {
stop("only defined for class 'range.sizes'")
}
}
IUCNest(results)
library(speciesgeocodeR)
IUCNest(results)
dat <- read.table('C:\\Users\\xzizal\\Dropbox (Antonelli Lab)\\Arbeit\\Gothenburg\\Projects\\9_Burkina_distribution_atlas\\data\\data_BFA_atlas_marco20140701.txt', sep = '\t', header = T) dat$NameAcc <- as.character(dat$NameAcc) dat <-
head(dat,1000)
results <- CalcRange(dat[,1:3], index = c('AOO', 'EOO'),
eoo.value = 'area', aoo.reps = 2)
dat <- read.table('C:\\Users\\xzizal\\Dropbox (Antonelli Lab)\\Arbeit\\Gothenburg\\Projects\\9_Burkina_distribution_atlas\\data\\data_BFA_atlas_marco20140701.txt', sep = '\t', header = T) dat$NameAcc <- as.character(dat$NameAcc)
dat <- head(dat,1000)
results <- CalcRange(dat[,1:3], index = c('AOO', 'EOO'),
eoo.value = 'area', aoo.reps = 2)
IUCNest(results)
library(speciesgeocodeR)
IUCNest(results)
library(speciesgeocodeR)
IUCNest(results)
